** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-logic ALL)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s2 () Int 0)
[GOOD] (define-fun s15 () Int 1)
[GOOD] (define-fun s8 () (Seq Int) (as seq.empty (Seq Int)))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () Int) ; tracks user variable "a"
[GOOD] (declare-fun s1 () Int) ; tracks user variable "b"
[GOOD] (declare-fun s10 () Int) ; tracks user variable "__internal_sbv_s10"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s3 () Bool (> s0 s2))
[GOOD] (define-fun s4 () Bool (> s1 s2))
[GOOD] (define-fun s5 () (Seq Int) (seq.unit s0))
[GOOD] (define-fun s6 () (Seq Int) (seq.unit s1))
[GOOD] (define-fun s7 () (Seq Int) (seq.++ s5 s6))
[GOOD] (define-fun s9 () Bool (= s7 s8))
[GOOD] (define-fun s11 () (Seq Int) (seq.unit s10))
[GOOD] (define-fun s12 () Int (seq.len s7))
[GOOD] (define-fun s13 () Bool (> s12 s2))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s16 () (Seq Int) (seq.extract s7 s2 s15))
[GOOD] (define-fun s17 () Bool (= s11 s16))
[GOOD] (define-fun s18 () Bool (or s14 s17))
[GOOD] (define-fun s19 () Int (ite s9 s2 s10))
[GOOD] (define-fun s20 () Int (+ s0 s1))
[GOOD] (define-fun s21 () Bool (= s19 s20))
[GOOD] (assert s3)
[GOOD] (assert s4)
[GOOD] (assert s18)
[GOOD] (assert s21)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
