** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-logic ALL)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] (declare-datatypes ((SBVTuple2 2)) ((par (T1 T2)
                                           ((mkSBVTuple2 (proj_1_SBVTuple2 T1)
                                                         (proj_2_SBVTuple2 T2))))))
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s4 () Int 0)
[GOOD] (define-fun s7 () Int 1)
[GOOD] (define-fun s12 () Int 2)
[GOOD] (define-fun s33 () Int 4)
[GOOD] (define-fun s41 () Int 5)
[GOOD] (define-fun s31 () String "foo")
[GOOD] (define-fun s53 () (Seq (SBVTuple2 Int (Seq (SBVTuple2 Int String)))) (seq.++ (seq.unit (mkSBVTuple2 2 (as seq.empty (Seq (SBVTuple2 Int String))))) (seq.unit (mkSBVTuple2 1 (seq.++ (seq.unit (mkSBVTuple2 3 "foo")) (seq.unit (mkSBVTuple2 0 "bar")) (seq.unit (mkSBVTuple2 (- 1) "baz")) (seq.unit (mkSBVTuple2 (- 2) "quux")) (seq.unit (mkSBVTuple2 (- 3) "enough"))))) (seq.unit (mkSBVTuple2 (- 4) (as seq.empty (Seq (SBVTuple2 Int String))))) (seq.unit (mkSBVTuple2 (- 5) (as seq.empty (Seq (SBVTuple2 Int String)))))))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (Seq (SBVTuple2 Int (Seq (SBVTuple2 Int String))))) ; tracks user variable "lst"
[GOOD] (declare-fun s1 () (SBVTuple2 Int (Seq (SBVTuple2 Int String)))) ; tracks user variable "__internal_sbv_s1"
[GOOD] (declare-fun s14 () (SBVTuple2 Int String)) ; tracks user variable "__internal_sbv_s14"
[GOOD] (declare-fun s16 () (SBVTuple2 Int (Seq (SBVTuple2 Int String)))) ; tracks user variable "__internal_sbv_s16"
[GOOD] (declare-fun s35 () (SBVTuple2 Int (Seq (SBVTuple2 Int String)))) ; tracks user variable "__internal_sbv_s35"
[GOOD] (declare-fun s43 () (SBVTuple2 Int (Seq (SBVTuple2 Int String)))) ; tracks user variable "__internal_sbv_s43"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (Seq (SBVTuple2 Int (Seq (SBVTuple2 Int String)))) (seq.unit s1))
[GOOD] (define-fun s3 () Int (seq.len s0))
[GOOD] (define-fun s5 () Bool (> s3 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s8 () (Seq (SBVTuple2 Int (Seq (SBVTuple2 Int String)))) (seq.extract s0 s4 s7))
[GOOD] (define-fun s9 () Bool (= s2 s8))
[GOOD] (define-fun s10 () Bool (or s6 s9))
[GOOD] (define-fun s11 () Int (proj_1_SBVTuple2 s1))
[GOOD] (define-fun s13 () Bool (= s11 s12))
[GOOD] (define-fun s15 () (Seq (SBVTuple2 Int String)) (seq.unit s14))
[GOOD] (define-fun s17 () (Seq (SBVTuple2 Int (Seq (SBVTuple2 Int String)))) (seq.unit s16))
[GOOD] (define-fun s18 () Bool (> s3 s7))
[GOOD] (define-fun s19 () Bool (not s18))
[GOOD] (define-fun s20 () (Seq (SBVTuple2 Int (Seq (SBVTuple2 Int String)))) (seq.extract s0 s7 s7))
[GOOD] (define-fun s21 () Bool (= s17 s20))
[GOOD] (define-fun s22 () Bool (or s19 s21))
[GOOD] (define-fun s23 () (Seq (SBVTuple2 Int String)) (proj_2_SBVTuple2 s16))
[GOOD] (define-fun s24 () Int (seq.len s23))
[GOOD] (define-fun s25 () Bool (> s24 s4))
[GOOD] (define-fun s26 () Bool (not s25))
[GOOD] (define-fun s27 () (Seq (SBVTuple2 Int String)) (seq.extract s23 s4 s7))
[GOOD] (define-fun s28 () Bool (= s15 s27))
[GOOD] (define-fun s29 () Bool (or s26 s28))
[GOOD] (define-fun s30 () String (proj_2_SBVTuple2 s14))
[GOOD] (define-fun s32 () Bool (= s30 s31))
[GOOD] (define-fun s34 () Bool (= s3 s33))
[GOOD] (define-fun s36 () (Seq (SBVTuple2 Int (Seq (SBVTuple2 Int String)))) (seq.unit s35))
[GOOD] (define-fun s37 () Bool (= s20 s36))
[GOOD] (define-fun s38 () Bool (or s19 s37))
[GOOD] (define-fun s39 () (Seq (SBVTuple2 Int String)) (proj_2_SBVTuple2 s35))
[GOOD] (define-fun s40 () Int (seq.len s39))
[GOOD] (define-fun s42 () Bool (= s40 s41))
[GOOD] (define-fun s44 () (Seq (SBVTuple2 Int (Seq (SBVTuple2 Int String)))) (seq.unit s43))
[GOOD] (define-fun s45 () Bool (> s3 s12))
[GOOD] (define-fun s46 () Bool (not s45))
[GOOD] (define-fun s47 () (Seq (SBVTuple2 Int (Seq (SBVTuple2 Int String)))) (seq.extract s0 s12 s7))
[GOOD] (define-fun s48 () Bool (= s44 s47))
[GOOD] (define-fun s49 () Bool (or s46 s48))
[GOOD] (define-fun s50 () (Seq (SBVTuple2 Int String)) (proj_2_SBVTuple2 s43))
[GOOD] (define-fun s51 () Int (seq.len s50))
[GOOD] (define-fun s52 () Bool (= s4 s51))
[GOOD] (define-fun s54 () Bool (= s0 s53))
[GOOD] (assert s10)
[GOOD] (assert s13)
[GOOD] (assert s22)
[GOOD] (assert s29)
[GOOD] (assert s32)
[GOOD] (assert s34)
[GOOD] (assert s38)
[GOOD] (assert s42)
[GOOD] (assert s49)
[GOOD] (assert s52)
[GOOD] (assert s54)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 (seq.++ (seq.unit (mkSBVTuple2 2 (as seq.empty (Seq (SBVTuple2 Int String)))))
               (seq.++ (seq.unit (mkSBVTuple2 1
                                              (seq.++ (seq.unit (mkSBVTuple2 3 "foo"))
                                                      (seq.++ (seq.unit (mkSBVTuple2 0
                                                                                     "bar"))
                                                              (seq.++ (seq.unit (mkSBVTuple2 (- 1)
                                                                                             "baz"))
                                                                      (seq.++ (seq.unit (mkSBVTuple2 (- 2)
                                                                                                     "quux"))
                                                                              (seq.unit (mkSBVTuple2 (- 3)
                                                                                                     "enough"))))))))
                       (seq.++ (seq.unit (mkSBVTuple2 (- 4)
                                                      (as seq.empty
                                                          (Seq (SBVTuple2 Int String)))))
                               (seq.unit (mkSBVTuple2 (- 5)
                                                      (as seq.empty
                                                          (Seq (SBVTuple2 Int String))))))))))
*** Solver   : Z3
*** Exit code: ExitSuccess

 FINAL: [(2,[]),(1,[(3,"foo"),(0,"bar"),(-1,"baz"),(-2,"quux"),(-3,"enough")]),(-4,[]),(-5,[])]
DONE!
