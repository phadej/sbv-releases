** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-logic ALL)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] (declare-datatypes ((SBVTuple2 2)) ((par (T1 T2)
                                           ((mkSBVTuple2 (proj_1_SBVTuple2 T1)
                                                         (proj_2_SBVTuple2 T2))))))
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s3 () Int 0)
[GOOD] (define-fun s4 () Int 1)
[GOOD] (define-fun s11 () Int 2)
[GOOD] (define-fun s30 () Int 4)
[GOOD] (define-fun s38 () Int 5)
[GOOD] (define-fun s28 () String "foo")
[GOOD] (define-fun s49 () (Seq (SBVTuple2 Int (Seq (SBVTuple2 Int String)))) (seq.++ (seq.unit (mkSBVTuple2 2 (as seq.empty (Seq (SBVTuple2 Int String))))) (seq.unit (mkSBVTuple2 1 (seq.++ (seq.unit (mkSBVTuple2 3 "foo")) (seq.unit (mkSBVTuple2 0 "bar")) (seq.unit (mkSBVTuple2 (- 1) "baz")) (seq.unit (mkSBVTuple2 (- 2) "quux")) (seq.unit (mkSBVTuple2 (- 3) "enough"))))) (seq.unit (mkSBVTuple2 (- 4) (as seq.empty (Seq (SBVTuple2 Int String))))) (seq.unit (mkSBVTuple2 (- 5) (as seq.empty (Seq (SBVTuple2 Int String)))))))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (Seq (SBVTuple2 Int (Seq (SBVTuple2 Int String))))) ; tracks user variable "lst"
[GOOD] (declare-fun s1 () (SBVTuple2 Int (Seq (SBVTuple2 Int String)))) ; tracks user variable "__internal_sbv_s1"
[GOOD] (declare-fun s13 () (SBVTuple2 Int String)) ; tracks user variable "__internal_sbv_s13"
[GOOD] (declare-fun s15 () (SBVTuple2 Int (Seq (SBVTuple2 Int String)))) ; tracks user variable "__internal_sbv_s15"
[GOOD] (declare-fun s32 () (SBVTuple2 Int (Seq (SBVTuple2 Int String)))) ; tracks user variable "__internal_sbv_s32"
[GOOD] (declare-fun s40 () (SBVTuple2 Int (Seq (SBVTuple2 Int String)))) ; tracks user variable "__internal_sbv_s40"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (Seq (SBVTuple2 Int (Seq (SBVTuple2 Int String)))) (seq.unit s1))
[GOOD] (define-fun s5 () (Seq (SBVTuple2 Int (Seq (SBVTuple2 Int String)))) (seq.extract s0 s3 s4))
[GOOD] (define-fun s6 () Bool (= s2 s5))
[GOOD] (define-fun s7 () Int (seq.len s0))
[GOOD] (define-fun s8 () Bool (<= s7 s3))
[GOOD] (define-fun s9 () Bool (or s6 s8))
[GOOD] (define-fun s10 () Int (proj_1_SBVTuple2 s1))
[GOOD] (define-fun s12 () Bool (= s10 s11))
[GOOD] (define-fun s14 () (Seq (SBVTuple2 Int String)) (seq.unit s13))
[GOOD] (define-fun s16 () (Seq (SBVTuple2 Int (Seq (SBVTuple2 Int String)))) (seq.unit s15))
[GOOD] (define-fun s17 () (Seq (SBVTuple2 Int (Seq (SBVTuple2 Int String)))) (seq.extract s0 s4 s4))
[GOOD] (define-fun s18 () Bool (= s16 s17))
[GOOD] (define-fun s19 () Bool (<= s7 s4))
[GOOD] (define-fun s20 () Bool (or s18 s19))
[GOOD] (define-fun s21 () (Seq (SBVTuple2 Int String)) (proj_2_SBVTuple2 s15))
[GOOD] (define-fun s22 () (Seq (SBVTuple2 Int String)) (seq.extract s21 s3 s4))
[GOOD] (define-fun s23 () Bool (= s14 s22))
[GOOD] (define-fun s24 () Int (seq.len s21))
[GOOD] (define-fun s25 () Bool (<= s24 s3))
[GOOD] (define-fun s26 () Bool (or s23 s25))
[GOOD] (define-fun s27 () String (proj_2_SBVTuple2 s13))
[GOOD] (define-fun s29 () Bool (= s27 s28))
[GOOD] (define-fun s31 () Bool (= s7 s30))
[GOOD] (define-fun s33 () (Seq (SBVTuple2 Int (Seq (SBVTuple2 Int String)))) (seq.unit s32))
[GOOD] (define-fun s34 () Bool (= s17 s33))
[GOOD] (define-fun s35 () Bool (or s19 s34))
[GOOD] (define-fun s36 () (Seq (SBVTuple2 Int String)) (proj_2_SBVTuple2 s32))
[GOOD] (define-fun s37 () Int (seq.len s36))
[GOOD] (define-fun s39 () Bool (= s37 s38))
[GOOD] (define-fun s41 () (Seq (SBVTuple2 Int (Seq (SBVTuple2 Int String)))) (seq.unit s40))
[GOOD] (define-fun s42 () (Seq (SBVTuple2 Int (Seq (SBVTuple2 Int String)))) (seq.extract s0 s11 s4))
[GOOD] (define-fun s43 () Bool (= s41 s42))
[GOOD] (define-fun s44 () Bool (<= s7 s11))
[GOOD] (define-fun s45 () Bool (or s43 s44))
[GOOD] (define-fun s46 () (Seq (SBVTuple2 Int String)) (proj_2_SBVTuple2 s40))
[GOOD] (define-fun s47 () Int (seq.len s46))
[GOOD] (define-fun s48 () Bool (= s3 s47))
[GOOD] (define-fun s50 () Bool (= s0 s49))
[GOOD] (assert s9)
[GOOD] (assert s12)
[GOOD] (assert s20)
[GOOD] (assert s26)
[GOOD] (assert s29)
[GOOD] (assert s31)
[GOOD] (assert s35)
[GOOD] (assert s39)
[GOOD] (assert s45)
[GOOD] (assert s48)
[GOOD] (assert s50)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 (seq.++ (seq.unit (mkSBVTuple2 2 (as seq.empty (Seq (SBVTuple2 Int String)))))
               (seq.++ (seq.unit (mkSBVTuple2 1
                                              (seq.++ (seq.unit (mkSBVTuple2 3 "foo"))
                                                      (seq.++ (seq.unit (mkSBVTuple2 0
                                                                                     "bar"))
                                                              (seq.++ (seq.unit (mkSBVTuple2 (- 1)
                                                                                             "baz"))
                                                                      (seq.++ (seq.unit (mkSBVTuple2 (- 2)
                                                                                                     "quux"))
                                                                              (seq.unit (mkSBVTuple2 (- 3)
                                                                                                     "enough"))))))))
                       (seq.++ (seq.unit (mkSBVTuple2 (- 4)
                                                      (as seq.empty
                                                          (Seq (SBVTuple2 Int String)))))
                               (seq.unit (mkSBVTuple2 (- 5)
                                                      (as seq.empty
                                                          (Seq (SBVTuple2 Int String))))))))))
*** Solver   : Z3
*** Exit code: ExitSuccess

 FINAL: [(2,[]),(1,[(3,"foo"),(0,"bar"),(-1,"baz"),(-2,"quux"),(-3,"enough")]),(-4,[]),(-5,[])]
DONE!
