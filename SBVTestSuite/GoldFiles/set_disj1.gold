** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-logic ALL) ; has sets, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s2 () (Array (_ BitVec 8) Bool) (store ((as const (Array (_ BitVec 8) Bool)) false) #x61 true))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (Array (_ BitVec 8) Bool)) ; tracks user variable "a"
[GOOD] (declare-fun s1 () (Array (_ BitVec 8) Bool)) ; tracks user variable "b"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s3 () Bool (= s0 s2))
[GOOD] (define-fun s4 () Bool (= s1 s2))
[GOOD] (assert s3)
[GOOD] (assert s4)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 (store ((as const (Array (_ BitVec 8) Bool)) false) #x61 true)))
[SEND] (get-value (s1))
[RECV] ((s1 (store ((as const (Array (_ BitVec 8) Bool)) false) #x61 true)))
[GOOD] (define-fun s6 () (Array (_ BitVec 8) Bool) ((as const (Array (_ BitVec 8) Bool)) false))
[GOOD] (define-fun s5 () (Array (_ BitVec 8) Bool) (intersection s0 s1))
[GOOD] (define-fun s7 () Bool (= s5 s6))
[SEND] (get-value (s7))
[RECV] ((s7 false))
[GOOD] (define-fun s8 () (Array (_ BitVec 8) Bool) (complement s1))
[GOOD] (define-fun s9 () (Array (_ BitVec 8) Bool) (intersection s0 s8))
[GOOD] (define-fun s10 () Bool (= s9 s6))
[SEND] (get-value (s10))
[RECV] ((s10 true))
[GOOD] (define-fun s11 () (Array (_ BitVec 8) Bool) (complement s0))
[GOOD] (define-fun s12 () (Array (_ BitVec 8) Bool) (intersection s11 s1))
[GOOD] (define-fun s13 () Bool (= s12 s6))
[SEND] (get-value (s13))
[RECV] ((s13 true))
[GOOD] (define-fun s14 () (Array (_ BitVec 8) Bool) (intersection s11 s8))
[GOOD] (define-fun s15 () Bool (= s14 s6))
[SEND] (get-value (s15))
[RECV] ((s15 false))
*** Solver   : Z3
*** Exit code: ExitSuccess

FINAL:
({'a'},{'a'},False,True,True,False)
DONE!
