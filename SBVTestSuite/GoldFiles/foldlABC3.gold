** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-logic ALL)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s3 () Int 0)
[GOOD] (define-fun s16 () Int 1)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () Int) ; tracks user variable "a"
[GOOD] (declare-fun s1 () Int) ; tracks user variable "b"
[GOOD] (declare-fun s2 () Int) ; tracks user variable "c"
[GOOD] (declare-fun s14 () Int) ; tracks user variable "__internal_sbv_s14"
[GOOD] (declare-fun s25 () Int) ; tracks user variable "__internal_sbv_s25"
[GOOD] (declare-fun s35 () Int) ; tracks user variable "__internal_sbv_s35"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s4 () Bool (> s0 s3))
[GOOD] (define-fun s5 () Bool (> s1 s3))
[GOOD] (define-fun s6 () Bool (> s2 s3))
[GOOD] (define-fun s7 () (Seq Int) (seq.unit s0))
[GOOD] (define-fun s8 () (Seq Int) (seq.unit s1))
[GOOD] (define-fun s9 () (Seq Int) (seq.unit s2))
[GOOD] (define-fun s10 () (Seq Int) (seq.++ s8 s9))
[GOOD] (define-fun s11 () (Seq Int) (seq.++ s7 s10))
[GOOD] (define-fun s12 () Int (seq.len s11))
[GOOD] (define-fun s13 () Bool (= s3 s12))
[GOOD] (define-fun s15 () (Seq Int) (seq.unit s14))
[GOOD] (define-fun s17 () (Seq Int) (seq.extract s11 s3 s16))
[GOOD] (define-fun s18 () Bool (= s15 s17))
[GOOD] (define-fun s19 () Bool (<= s12 s3))
[GOOD] (define-fun s20 () Bool (or s18 s19))
[GOOD] (define-fun s21 () Int (- s12 s16))
[GOOD] (define-fun s22 () (Seq Int) (seq.extract s11 s16 s21))
[GOOD] (define-fun s23 () Int (seq.len s22))
[GOOD] (define-fun s24 () Bool (= s3 s23))
[GOOD] (define-fun s26 () (Seq Int) (seq.unit s25))
[GOOD] (define-fun s27 () (Seq Int) (seq.extract s22 s3 s16))
[GOOD] (define-fun s28 () Bool (= s26 s27))
[GOOD] (define-fun s29 () Bool (<= s23 s3))
[GOOD] (define-fun s30 () Bool (or s28 s29))
[GOOD] (define-fun s31 () Int (- s23 s16))
[GOOD] (define-fun s32 () (Seq Int) (seq.extract s22 s16 s31))
[GOOD] (define-fun s33 () Int (seq.len s32))
[GOOD] (define-fun s34 () Bool (= s3 s33))
[GOOD] (define-fun s36 () (Seq Int) (seq.unit s35))
[GOOD] (define-fun s37 () (Seq Int) (seq.extract s32 s3 s16))
[GOOD] (define-fun s38 () Bool (= s36 s37))
[GOOD] (define-fun s39 () Bool (<= s33 s3))
[GOOD] (define-fun s40 () Bool (or s38 s39))
[GOOD] (define-fun s41 () Int (ite s34 s3 s35))
[GOOD] (define-fun s42 () Int (+ s25 s41))
[GOOD] (define-fun s43 () Int (ite s24 s3 s42))
[GOOD] (define-fun s44 () Int (+ s14 s43))
[GOOD] (define-fun s45 () Int (ite s13 s3 s44))
[GOOD] (define-fun s46 () Int (+ s0 s1))
[GOOD] (define-fun s47 () Int (+ s2 s46))
[GOOD] (define-fun s48 () Bool (= s45 s47))
[GOOD] (assert s4)
[GOOD] (assert s5)
[GOOD] (assert s6)
[GOOD] (assert s20)
[GOOD] (assert s30)
[GOOD] (assert s40)
[GOOD] (assert s48)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
