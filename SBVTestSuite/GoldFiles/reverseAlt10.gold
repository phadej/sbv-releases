** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-logic ALL)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s3 () Int 1)
[GOOD] (define-fun s43 () Int 0)
[GOOD] (define-fun s1 () (Seq Int) (as seq.empty (Seq Int)))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (Seq Int)) ; tracks user variable "xs"
[GOOD] (declare-fun s40 () Int) ; tracks user variable "__internal_sbv_s40"
[GOOD] (declare-fun s50 () Int) ; tracks user variable "__internal_sbv_s50"
[GOOD] (declare-fun s59 () Int) ; tracks user variable "__internal_sbv_s59"
[GOOD] (declare-fun s68 () Int) ; tracks user variable "__internal_sbv_s68"
[GOOD] (declare-fun s77 () Int) ; tracks user variable "__internal_sbv_s77"
[GOOD] (declare-fun s86 () Int) ; tracks user variable "__internal_sbv_s86"
[GOOD] (declare-fun s95 () Int) ; tracks user variable "__internal_sbv_s95"
[GOOD] (declare-fun s104 () Int) ; tracks user variable "__internal_sbv_s104"
[GOOD] (declare-fun s113 () Int) ; tracks user variable "__internal_sbv_s113"
[GOOD] (declare-fun s122 () Int) ; tracks user variable "__internal_sbv_s122"
[GOOD] (declare-fun s131 () Int) ; tracks user variable "__internal_sbv_s131"
[GOOD] (declare-fun s135 () Int) ; tracks user variable "__internal_sbv_s135"
[GOOD] (declare-fun s140 () Int) ; tracks user variable "__internal_sbv_s140"
[GOOD] (declare-fun s145 () Int) ; tracks user variable "__internal_sbv_s145"
[GOOD] (declare-fun s150 () Int) ; tracks user variable "__internal_sbv_s150"
[GOOD] (declare-fun s155 () Int) ; tracks user variable "__internal_sbv_s155"
[GOOD] (declare-fun s160 () Int) ; tracks user variable "__internal_sbv_s160"
[GOOD] (declare-fun s165 () Int) ; tracks user variable "__internal_sbv_s165"
[GOOD] (declare-fun s170 () Int) ; tracks user variable "__internal_sbv_s170"
[GOOD] (declare-fun s175 () Int) ; tracks user variable "__internal_sbv_s175"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () Int (seq.len s0))
[GOOD] (define-fun s5 () Int (- s4 s3))
[GOOD] (define-fun s6 () (Seq Int) (seq.extract s0 s3 s5))
[GOOD] (define-fun s7 () Bool (= s1 s6))
[GOOD] (define-fun s8 () Int (seq.len s6))
[GOOD] (define-fun s9 () Int (- s8 s3))
[GOOD] (define-fun s10 () (Seq Int) (seq.extract s6 s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s10))
[GOOD] (define-fun s12 () Int (seq.len s10))
[GOOD] (define-fun s13 () Int (- s12 s3))
[GOOD] (define-fun s14 () (Seq Int) (seq.extract s10 s3 s13))
[GOOD] (define-fun s15 () Bool (= s1 s14))
[GOOD] (define-fun s16 () Int (seq.len s14))
[GOOD] (define-fun s17 () Int (- s16 s3))
[GOOD] (define-fun s18 () (Seq Int) (seq.extract s14 s3 s17))
[GOOD] (define-fun s19 () Bool (= s1 s18))
[GOOD] (define-fun s20 () Int (seq.len s18))
[GOOD] (define-fun s21 () Int (- s20 s3))
[GOOD] (define-fun s22 () (Seq Int) (seq.extract s18 s3 s21))
[GOOD] (define-fun s23 () Bool (= s1 s22))
[GOOD] (define-fun s24 () Int (seq.len s22))
[GOOD] (define-fun s25 () Int (- s24 s3))
[GOOD] (define-fun s26 () (Seq Int) (seq.extract s22 s3 s25))
[GOOD] (define-fun s27 () Bool (= s1 s26))
[GOOD] (define-fun s28 () Int (seq.len s26))
[GOOD] (define-fun s29 () Int (- s28 s3))
[GOOD] (define-fun s30 () (Seq Int) (seq.extract s26 s3 s29))
[GOOD] (define-fun s31 () Bool (= s1 s30))
[GOOD] (define-fun s32 () Int (seq.len s30))
[GOOD] (define-fun s33 () Int (- s32 s3))
[GOOD] (define-fun s34 () (Seq Int) (seq.extract s30 s3 s33))
[GOOD] (define-fun s35 () Bool (= s1 s34))
[GOOD] (define-fun s36 () Int (seq.len s34))
[GOOD] (define-fun s37 () Int (- s36 s3))
[GOOD] (define-fun s38 () (Seq Int) (seq.extract s34 s3 s37))
[GOOD] (define-fun s39 () Bool (= s1 s38))
[GOOD] (define-fun s41 () (Seq Int) (seq.unit s40))
[GOOD] (define-fun s42 () Int (seq.len s38))
[GOOD] (define-fun s44 () Bool (> s42 s43))
[GOOD] (define-fun s45 () Bool (not s44))
[GOOD] (define-fun s46 () (Seq Int) (seq.extract s38 s43 s3))
[GOOD] (define-fun s47 () Bool (= s41 s46))
[GOOD] (define-fun s48 () Bool (or s45 s47))
[GOOD] (define-fun s49 () (Seq Int) (ite s39 s1 s41))
[GOOD] (define-fun s51 () (Seq Int) (seq.unit s50))
[GOOD] (define-fun s52 () Bool (> s36 s43))
[GOOD] (define-fun s53 () Bool (not s52))
[GOOD] (define-fun s54 () (Seq Int) (seq.extract s34 s43 s3))
[GOOD] (define-fun s55 () Bool (= s51 s54))
[GOOD] (define-fun s56 () Bool (or s53 s55))
[GOOD] (define-fun s57 () (Seq Int) (seq.++ s49 s51))
[GOOD] (define-fun s58 () (Seq Int) (ite s35 s1 s57))
[GOOD] (define-fun s60 () (Seq Int) (seq.unit s59))
[GOOD] (define-fun s61 () Bool (> s32 s43))
[GOOD] (define-fun s62 () Bool (not s61))
[GOOD] (define-fun s63 () (Seq Int) (seq.extract s30 s43 s3))
[GOOD] (define-fun s64 () Bool (= s60 s63))
[GOOD] (define-fun s65 () Bool (or s62 s64))
[GOOD] (define-fun s66 () (Seq Int) (seq.++ s58 s60))
[GOOD] (define-fun s67 () (Seq Int) (ite s31 s1 s66))
[GOOD] (define-fun s69 () (Seq Int) (seq.unit s68))
[GOOD] (define-fun s70 () Bool (> s28 s43))
[GOOD] (define-fun s71 () Bool (not s70))
[GOOD] (define-fun s72 () (Seq Int) (seq.extract s26 s43 s3))
[GOOD] (define-fun s73 () Bool (= s69 s72))
[GOOD] (define-fun s74 () Bool (or s71 s73))
[GOOD] (define-fun s75 () (Seq Int) (seq.++ s67 s69))
[GOOD] (define-fun s76 () (Seq Int) (ite s27 s1 s75))
[GOOD] (define-fun s78 () (Seq Int) (seq.unit s77))
[GOOD] (define-fun s79 () Bool (> s24 s43))
[GOOD] (define-fun s80 () Bool (not s79))
[GOOD] (define-fun s81 () (Seq Int) (seq.extract s22 s43 s3))
[GOOD] (define-fun s82 () Bool (= s78 s81))
[GOOD] (define-fun s83 () Bool (or s80 s82))
[GOOD] (define-fun s84 () (Seq Int) (seq.++ s76 s78))
[GOOD] (define-fun s85 () (Seq Int) (ite s23 s1 s84))
[GOOD] (define-fun s87 () (Seq Int) (seq.unit s86))
[GOOD] (define-fun s88 () Bool (> s20 s43))
[GOOD] (define-fun s89 () Bool (not s88))
[GOOD] (define-fun s90 () (Seq Int) (seq.extract s18 s43 s3))
[GOOD] (define-fun s91 () Bool (= s87 s90))
[GOOD] (define-fun s92 () Bool (or s89 s91))
[GOOD] (define-fun s93 () (Seq Int) (seq.++ s85 s87))
[GOOD] (define-fun s94 () (Seq Int) (ite s19 s1 s93))
[GOOD] (define-fun s96 () (Seq Int) (seq.unit s95))
[GOOD] (define-fun s97 () Bool (> s16 s43))
[GOOD] (define-fun s98 () Bool (not s97))
[GOOD] (define-fun s99 () (Seq Int) (seq.extract s14 s43 s3))
[GOOD] (define-fun s100 () Bool (= s96 s99))
[GOOD] (define-fun s101 () Bool (or s98 s100))
[GOOD] (define-fun s102 () (Seq Int) (seq.++ s94 s96))
[GOOD] (define-fun s103 () (Seq Int) (ite s15 s1 s102))
[GOOD] (define-fun s105 () (Seq Int) (seq.unit s104))
[GOOD] (define-fun s106 () Bool (> s12 s43))
[GOOD] (define-fun s107 () Bool (not s106))
[GOOD] (define-fun s108 () (Seq Int) (seq.extract s10 s43 s3))
[GOOD] (define-fun s109 () Bool (= s105 s108))
[GOOD] (define-fun s110 () Bool (or s107 s109))
[GOOD] (define-fun s111 () (Seq Int) (seq.++ s103 s105))
[GOOD] (define-fun s112 () (Seq Int) (ite s11 s1 s111))
[GOOD] (define-fun s114 () (Seq Int) (seq.unit s113))
[GOOD] (define-fun s115 () Bool (> s8 s43))
[GOOD] (define-fun s116 () Bool (not s115))
[GOOD] (define-fun s117 () (Seq Int) (seq.extract s6 s43 s3))
[GOOD] (define-fun s118 () Bool (= s114 s117))
[GOOD] (define-fun s119 () Bool (or s116 s118))
[GOOD] (define-fun s120 () (Seq Int) (seq.++ s112 s114))
[GOOD] (define-fun s121 () (Seq Int) (ite s7 s1 s120))
[GOOD] (define-fun s123 () (Seq Int) (seq.unit s122))
[GOOD] (define-fun s124 () Bool (> s4 s43))
[GOOD] (define-fun s125 () Bool (not s124))
[GOOD] (define-fun s126 () (Seq Int) (seq.extract s0 s43 s3))
[GOOD] (define-fun s127 () Bool (= s123 s126))
[GOOD] (define-fun s128 () Bool (or s125 s127))
[GOOD] (define-fun s129 () (Seq Int) (seq.++ s121 s123))
[GOOD] (define-fun s130 () (Seq Int) (ite s2 s1 s129))
[GOOD] (define-fun s132 () (Seq Int) (seq.unit s131))
[GOOD] (define-fun s133 () Bool (= s126 s132))
[GOOD] (define-fun s134 () Bool (or s125 s133))
[GOOD] (define-fun s136 () (Seq Int) (seq.unit s135))
[GOOD] (define-fun s137 () Bool (= s117 s136))
[GOOD] (define-fun s138 () Bool (or s116 s137))
[GOOD] (define-fun s139 () (Seq Int) (seq.++ s136 s132))
[GOOD] (define-fun s141 () (Seq Int) (seq.unit s140))
[GOOD] (define-fun s142 () Bool (= s108 s141))
[GOOD] (define-fun s143 () Bool (or s107 s142))
[GOOD] (define-fun s144 () (Seq Int) (seq.++ s141 s139))
[GOOD] (define-fun s146 () (Seq Int) (seq.unit s145))
[GOOD] (define-fun s147 () Bool (= s99 s146))
[GOOD] (define-fun s148 () Bool (or s98 s147))
[GOOD] (define-fun s149 () (Seq Int) (seq.++ s146 s144))
[GOOD] (define-fun s151 () (Seq Int) (seq.unit s150))
[GOOD] (define-fun s152 () Bool (= s90 s151))
[GOOD] (define-fun s153 () Bool (or s89 s152))
[GOOD] (define-fun s154 () (Seq Int) (seq.++ s151 s149))
[GOOD] (define-fun s156 () (Seq Int) (seq.unit s155))
[GOOD] (define-fun s157 () Bool (= s81 s156))
[GOOD] (define-fun s158 () Bool (or s80 s157))
[GOOD] (define-fun s159 () (Seq Int) (seq.++ s156 s154))
[GOOD] (define-fun s161 () (Seq Int) (seq.unit s160))
[GOOD] (define-fun s162 () Bool (= s72 s161))
[GOOD] (define-fun s163 () Bool (or s71 s162))
[GOOD] (define-fun s164 () (Seq Int) (seq.++ s161 s159))
[GOOD] (define-fun s166 () (Seq Int) (seq.unit s165))
[GOOD] (define-fun s167 () Bool (= s63 s166))
[GOOD] (define-fun s168 () Bool (or s62 s167))
[GOOD] (define-fun s169 () (Seq Int) (seq.++ s166 s164))
[GOOD] (define-fun s171 () (Seq Int) (seq.unit s170))
[GOOD] (define-fun s172 () Bool (= s54 s171))
[GOOD] (define-fun s173 () Bool (or s53 s172))
[GOOD] (define-fun s174 () (Seq Int) (seq.++ s171 s169))
[GOOD] (define-fun s176 () (Seq Int) (seq.unit s175))
[GOOD] (define-fun s177 () Bool (= s46 s176))
[GOOD] (define-fun s178 () Bool (or s45 s177))
[GOOD] (define-fun s179 () (Seq Int) (seq.++ s176 s174))
[GOOD] (define-fun s180 () (Seq Int) (ite s39 s174 s179))
[GOOD] (define-fun s181 () (Seq Int) (ite s35 s169 s180))
[GOOD] (define-fun s182 () (Seq Int) (ite s31 s164 s181))
[GOOD] (define-fun s183 () (Seq Int) (ite s27 s159 s182))
[GOOD] (define-fun s184 () (Seq Int) (ite s23 s154 s183))
[GOOD] (define-fun s185 () (Seq Int) (ite s19 s149 s184))
[GOOD] (define-fun s186 () (Seq Int) (ite s15 s144 s185))
[GOOD] (define-fun s187 () (Seq Int) (ite s11 s139 s186))
[GOOD] (define-fun s188 () (Seq Int) (ite s7 s132 s187))
[GOOD] (define-fun s189 () (Seq Int) (ite s2 s1 s188))
[GOOD] (define-fun s190 () Bool (distinct s130 s189))
[GOOD] (assert s48)
[GOOD] (assert s56)
[GOOD] (assert s65)
[GOOD] (assert s74)
[GOOD] (assert s83)
[GOOD] (assert s92)
[GOOD] (assert s101)
[GOOD] (assert s110)
[GOOD] (assert s119)
[GOOD] (assert s128)
[GOOD] (assert s134)
[GOOD] (assert s138)
[GOOD] (assert s143)
[GOOD] (assert s148)
[GOOD] (assert s153)
[GOOD] (assert s158)
[GOOD] (assert s163)
[GOOD] (assert s168)
[GOOD] (assert s173)
[GOOD] (assert s178)
[GOOD] (assert s190)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
