** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-logic ALL)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s2 () Int 0)
[GOOD] (define-fun s5 () Int 1)
[GOOD] (define-fun s4 () (Seq Int) (as seq.empty (Seq Int)))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (Seq Int)) ; tracks user variable "xs"
[GOOD] (declare-fun s42 () Int) ; tracks user variable "__internal_sbv_s42"
[GOOD] (declare-fun s49 () Int) ; tracks user variable "__internal_sbv_s49"
[GOOD] (declare-fun s57 () Int) ; tracks user variable "__internal_sbv_s57"
[GOOD] (declare-fun s65 () Int) ; tracks user variable "__internal_sbv_s65"
[GOOD] (declare-fun s73 () Int) ; tracks user variable "__internal_sbv_s73"
[GOOD] (declare-fun s81 () Int) ; tracks user variable "__internal_sbv_s81"
[GOOD] (declare-fun s89 () Int) ; tracks user variable "__internal_sbv_s89"
[GOOD] (declare-fun s97 () Int) ; tracks user variable "__internal_sbv_s97"
[GOOD] (declare-fun s105 () Int) ; tracks user variable "__internal_sbv_s105"
[GOOD] (declare-fun s113 () Int) ; tracks user variable "__internal_sbv_s113"
[GOOD] (declare-fun s121 () Int) ; tracks user variable "__internal_sbv_s121"
[GOOD] (declare-fun s125 () Int) ; tracks user variable "__internal_sbv_s125"
[GOOD] (declare-fun s130 () Int) ; tracks user variable "__internal_sbv_s130"
[GOOD] (declare-fun s135 () Int) ; tracks user variable "__internal_sbv_s135"
[GOOD] (declare-fun s140 () Int) ; tracks user variable "__internal_sbv_s140"
[GOOD] (declare-fun s145 () Int) ; tracks user variable "__internal_sbv_s145"
[GOOD] (declare-fun s150 () Int) ; tracks user variable "__internal_sbv_s150"
[GOOD] (declare-fun s155 () Int) ; tracks user variable "__internal_sbv_s155"
[GOOD] (declare-fun s160 () Int) ; tracks user variable "__internal_sbv_s160"
[GOOD] (declare-fun s165 () Int) ; tracks user variable "__internal_sbv_s165"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s1 () Int (seq.len s0))
[GOOD] (define-fun s3 () Bool (= s1 s2))
[GOOD] (define-fun s6 () Int (- s1 s5))
[GOOD] (define-fun s7 () (Seq Int) (seq.extract s0 s5 s6))
[GOOD] (define-fun s8 () Int (seq.len s7))
[GOOD] (define-fun s9 () Bool (= s2 s8))
[GOOD] (define-fun s10 () Int (- s8 s5))
[GOOD] (define-fun s11 () (Seq Int) (seq.extract s7 s5 s10))
[GOOD] (define-fun s12 () Int (seq.len s11))
[GOOD] (define-fun s13 () Bool (= s2 s12))
[GOOD] (define-fun s14 () Int (- s12 s5))
[GOOD] (define-fun s15 () (Seq Int) (seq.extract s11 s5 s14))
[GOOD] (define-fun s16 () Int (seq.len s15))
[GOOD] (define-fun s17 () Bool (= s2 s16))
[GOOD] (define-fun s18 () Int (- s16 s5))
[GOOD] (define-fun s19 () (Seq Int) (seq.extract s15 s5 s18))
[GOOD] (define-fun s20 () Int (seq.len s19))
[GOOD] (define-fun s21 () Bool (= s2 s20))
[GOOD] (define-fun s22 () Int (- s20 s5))
[GOOD] (define-fun s23 () (Seq Int) (seq.extract s19 s5 s22))
[GOOD] (define-fun s24 () Int (seq.len s23))
[GOOD] (define-fun s25 () Bool (= s2 s24))
[GOOD] (define-fun s26 () Int (- s24 s5))
[GOOD] (define-fun s27 () (Seq Int) (seq.extract s23 s5 s26))
[GOOD] (define-fun s28 () Int (seq.len s27))
[GOOD] (define-fun s29 () Bool (= s2 s28))
[GOOD] (define-fun s30 () Int (- s28 s5))
[GOOD] (define-fun s31 () (Seq Int) (seq.extract s27 s5 s30))
[GOOD] (define-fun s32 () Int (seq.len s31))
[GOOD] (define-fun s33 () Bool (= s2 s32))
[GOOD] (define-fun s34 () Int (- s32 s5))
[GOOD] (define-fun s35 () (Seq Int) (seq.extract s31 s5 s34))
[GOOD] (define-fun s36 () Int (seq.len s35))
[GOOD] (define-fun s37 () Bool (= s2 s36))
[GOOD] (define-fun s38 () Int (- s36 s5))
[GOOD] (define-fun s39 () (Seq Int) (seq.extract s35 s5 s38))
[GOOD] (define-fun s40 () Int (seq.len s39))
[GOOD] (define-fun s41 () Bool (= s2 s40))
[GOOD] (define-fun s43 () (Seq Int) (seq.unit s42))
[GOOD] (define-fun s44 () (Seq Int) (seq.extract s39 s2 s5))
[GOOD] (define-fun s45 () Bool (= s43 s44))
[GOOD] (define-fun s46 () Bool (<= s40 s2))
[GOOD] (define-fun s47 () Bool (or s45 s46))
[GOOD] (define-fun s48 () (Seq Int) (ite s41 s4 s43))
[GOOD] (define-fun s50 () (Seq Int) (seq.unit s49))
[GOOD] (define-fun s51 () (Seq Int) (seq.extract s35 s2 s5))
[GOOD] (define-fun s52 () Bool (= s50 s51))
[GOOD] (define-fun s53 () Bool (<= s36 s2))
[GOOD] (define-fun s54 () Bool (or s52 s53))
[GOOD] (define-fun s55 () (Seq Int) (seq.++ s48 s50))
[GOOD] (define-fun s56 () (Seq Int) (ite s37 s4 s55))
[GOOD] (define-fun s58 () (Seq Int) (seq.unit s57))
[GOOD] (define-fun s59 () (Seq Int) (seq.extract s31 s2 s5))
[GOOD] (define-fun s60 () Bool (= s58 s59))
[GOOD] (define-fun s61 () Bool (<= s32 s2))
[GOOD] (define-fun s62 () Bool (or s60 s61))
[GOOD] (define-fun s63 () (Seq Int) (seq.++ s56 s58))
[GOOD] (define-fun s64 () (Seq Int) (ite s33 s4 s63))
[GOOD] (define-fun s66 () (Seq Int) (seq.unit s65))
[GOOD] (define-fun s67 () (Seq Int) (seq.extract s27 s2 s5))
[GOOD] (define-fun s68 () Bool (= s66 s67))
[GOOD] (define-fun s69 () Bool (<= s28 s2))
[GOOD] (define-fun s70 () Bool (or s68 s69))
[GOOD] (define-fun s71 () (Seq Int) (seq.++ s64 s66))
[GOOD] (define-fun s72 () (Seq Int) (ite s29 s4 s71))
[GOOD] (define-fun s74 () (Seq Int) (seq.unit s73))
[GOOD] (define-fun s75 () (Seq Int) (seq.extract s23 s2 s5))
[GOOD] (define-fun s76 () Bool (= s74 s75))
[GOOD] (define-fun s77 () Bool (<= s24 s2))
[GOOD] (define-fun s78 () Bool (or s76 s77))
[GOOD] (define-fun s79 () (Seq Int) (seq.++ s72 s74))
[GOOD] (define-fun s80 () (Seq Int) (ite s25 s4 s79))
[GOOD] (define-fun s82 () (Seq Int) (seq.unit s81))
[GOOD] (define-fun s83 () (Seq Int) (seq.extract s19 s2 s5))
[GOOD] (define-fun s84 () Bool (= s82 s83))
[GOOD] (define-fun s85 () Bool (<= s20 s2))
[GOOD] (define-fun s86 () Bool (or s84 s85))
[GOOD] (define-fun s87 () (Seq Int) (seq.++ s80 s82))
[GOOD] (define-fun s88 () (Seq Int) (ite s21 s4 s87))
[GOOD] (define-fun s90 () (Seq Int) (seq.unit s89))
[GOOD] (define-fun s91 () (Seq Int) (seq.extract s15 s2 s5))
[GOOD] (define-fun s92 () Bool (= s90 s91))
[GOOD] (define-fun s93 () Bool (<= s16 s2))
[GOOD] (define-fun s94 () Bool (or s92 s93))
[GOOD] (define-fun s95 () (Seq Int) (seq.++ s88 s90))
[GOOD] (define-fun s96 () (Seq Int) (ite s17 s4 s95))
[GOOD] (define-fun s98 () (Seq Int) (seq.unit s97))
[GOOD] (define-fun s99 () (Seq Int) (seq.extract s11 s2 s5))
[GOOD] (define-fun s100 () Bool (= s98 s99))
[GOOD] (define-fun s101 () Bool (<= s12 s2))
[GOOD] (define-fun s102 () Bool (or s100 s101))
[GOOD] (define-fun s103 () (Seq Int) (seq.++ s96 s98))
[GOOD] (define-fun s104 () (Seq Int) (ite s13 s4 s103))
[GOOD] (define-fun s106 () (Seq Int) (seq.unit s105))
[GOOD] (define-fun s107 () (Seq Int) (seq.extract s7 s2 s5))
[GOOD] (define-fun s108 () Bool (= s106 s107))
[GOOD] (define-fun s109 () Bool (<= s8 s2))
[GOOD] (define-fun s110 () Bool (or s108 s109))
[GOOD] (define-fun s111 () (Seq Int) (seq.++ s104 s106))
[GOOD] (define-fun s112 () (Seq Int) (ite s9 s4 s111))
[GOOD] (define-fun s114 () (Seq Int) (seq.unit s113))
[GOOD] (define-fun s115 () (Seq Int) (seq.extract s0 s2 s5))
[GOOD] (define-fun s116 () Bool (= s114 s115))
[GOOD] (define-fun s117 () Bool (<= s1 s2))
[GOOD] (define-fun s118 () Bool (or s116 s117))
[GOOD] (define-fun s119 () (Seq Int) (seq.++ s112 s114))
[GOOD] (define-fun s120 () (Seq Int) (ite s3 s4 s119))
[GOOD] (define-fun s122 () (Seq Int) (seq.unit s121))
[GOOD] (define-fun s123 () Bool (= s115 s122))
[GOOD] (define-fun s124 () Bool (or s117 s123))
[GOOD] (define-fun s126 () (Seq Int) (seq.unit s125))
[GOOD] (define-fun s127 () Bool (= s107 s126))
[GOOD] (define-fun s128 () Bool (or s109 s127))
[GOOD] (define-fun s129 () (Seq Int) (seq.++ s126 s122))
[GOOD] (define-fun s131 () (Seq Int) (seq.unit s130))
[GOOD] (define-fun s132 () Bool (= s99 s131))
[GOOD] (define-fun s133 () Bool (or s101 s132))
[GOOD] (define-fun s134 () (Seq Int) (seq.++ s131 s129))
[GOOD] (define-fun s136 () (Seq Int) (seq.unit s135))
[GOOD] (define-fun s137 () Bool (= s91 s136))
[GOOD] (define-fun s138 () Bool (or s93 s137))
[GOOD] (define-fun s139 () (Seq Int) (seq.++ s136 s134))
[GOOD] (define-fun s141 () (Seq Int) (seq.unit s140))
[GOOD] (define-fun s142 () Bool (= s83 s141))
[GOOD] (define-fun s143 () Bool (or s85 s142))
[GOOD] (define-fun s144 () (Seq Int) (seq.++ s141 s139))
[GOOD] (define-fun s146 () (Seq Int) (seq.unit s145))
[GOOD] (define-fun s147 () Bool (= s75 s146))
[GOOD] (define-fun s148 () Bool (or s77 s147))
[GOOD] (define-fun s149 () (Seq Int) (seq.++ s146 s144))
[GOOD] (define-fun s151 () (Seq Int) (seq.unit s150))
[GOOD] (define-fun s152 () Bool (= s67 s151))
[GOOD] (define-fun s153 () Bool (or s69 s152))
[GOOD] (define-fun s154 () (Seq Int) (seq.++ s151 s149))
[GOOD] (define-fun s156 () (Seq Int) (seq.unit s155))
[GOOD] (define-fun s157 () Bool (= s59 s156))
[GOOD] (define-fun s158 () Bool (or s61 s157))
[GOOD] (define-fun s159 () (Seq Int) (seq.++ s156 s154))
[GOOD] (define-fun s161 () (Seq Int) (seq.unit s160))
[GOOD] (define-fun s162 () Bool (= s51 s161))
[GOOD] (define-fun s163 () Bool (or s53 s162))
[GOOD] (define-fun s164 () (Seq Int) (seq.++ s161 s159))
[GOOD] (define-fun s166 () (Seq Int) (seq.unit s165))
[GOOD] (define-fun s167 () Bool (= s44 s166))
[GOOD] (define-fun s168 () Bool (or s46 s167))
[GOOD] (define-fun s169 () (Seq Int) (seq.++ s166 s164))
[GOOD] (define-fun s170 () (Seq Int) (ite s41 s164 s169))
[GOOD] (define-fun s171 () (Seq Int) (ite s37 s159 s170))
[GOOD] (define-fun s172 () (Seq Int) (ite s33 s154 s171))
[GOOD] (define-fun s173 () (Seq Int) (ite s29 s149 s172))
[GOOD] (define-fun s174 () (Seq Int) (ite s25 s144 s173))
[GOOD] (define-fun s175 () (Seq Int) (ite s21 s139 s174))
[GOOD] (define-fun s176 () (Seq Int) (ite s17 s134 s175))
[GOOD] (define-fun s177 () (Seq Int) (ite s13 s129 s176))
[GOOD] (define-fun s178 () (Seq Int) (ite s9 s122 s177))
[GOOD] (define-fun s179 () (Seq Int) (ite s3 s4 s178))
[GOOD] (define-fun s180 () Bool (distinct s120 s179))
[GOOD] (assert s47)
[GOOD] (assert s54)
[GOOD] (assert s62)
[GOOD] (assert s70)
[GOOD] (assert s78)
[GOOD] (assert s86)
[GOOD] (assert s94)
[GOOD] (assert s102)
[GOOD] (assert s110)
[GOOD] (assert s118)
[GOOD] (assert s124)
[GOOD] (assert s128)
[GOOD] (assert s133)
[GOOD] (assert s138)
[GOOD] (assert s143)
[GOOD] (assert s148)
[GOOD] (assert s153)
[GOOD] (assert s158)
[GOOD] (assert s163)
[GOOD] (assert s168)
[GOOD] (assert s180)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
