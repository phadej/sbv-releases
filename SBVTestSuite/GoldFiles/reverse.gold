** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-logic ALL)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s12 () Int 0)
[GOOD] (define-fun s15 () Int 1)
[GOOD] (define-fun s14 () (Seq Int) (as seq.empty (Seq Int)))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () Int) ; tracks user variable "a"
[GOOD] (declare-fun s1 () Int) ; tracks user variable "b"
[GOOD] (declare-fun s2 () Int) ; tracks user variable "c"
[GOOD] (declare-fun s3 () Int) ; tracks user variable "d"
[GOOD] (declare-fun s52 () Int) ; tracks user variable "__internal_sbv_s52"
[GOOD] (declare-fun s59 () Int) ; tracks user variable "__internal_sbv_s59"
[GOOD] (declare-fun s67 () Int) ; tracks user variable "__internal_sbv_s67"
[GOOD] (declare-fun s75 () Int) ; tracks user variable "__internal_sbv_s75"
[GOOD] (declare-fun s83 () Int) ; tracks user variable "__internal_sbv_s83"
[GOOD] (declare-fun s91 () Int) ; tracks user variable "__internal_sbv_s91"
[GOOD] (declare-fun s99 () Int) ; tracks user variable "__internal_sbv_s99"
[GOOD] (declare-fun s107 () Int) ; tracks user variable "__internal_sbv_s107"
[GOOD] (declare-fun s115 () Int) ; tracks user variable "__internal_sbv_s115"
[GOOD] (declare-fun s123 () Int) ; tracks user variable "__internal_sbv_s123"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s4 () (Seq Int) (seq.unit s0))
[GOOD] (define-fun s5 () (Seq Int) (seq.unit s1))
[GOOD] (define-fun s6 () (Seq Int) (seq.unit s2))
[GOOD] (define-fun s7 () (Seq Int) (seq.unit s3))
[GOOD] (define-fun s8 () (Seq Int) (seq.++ s6 s7))
[GOOD] (define-fun s9 () (Seq Int) (seq.++ s5 s8))
[GOOD] (define-fun s10 () (Seq Int) (seq.++ s4 s9))
[GOOD] (define-fun s11 () Int (seq.len s10))
[GOOD] (define-fun s13 () Bool (= s11 s12))
[GOOD] (define-fun s16 () Int (- s11 s15))
[GOOD] (define-fun s17 () (Seq Int) (seq.extract s10 s15 s16))
[GOOD] (define-fun s18 () Int (seq.len s17))
[GOOD] (define-fun s19 () Bool (= s12 s18))
[GOOD] (define-fun s20 () Int (- s18 s15))
[GOOD] (define-fun s21 () (Seq Int) (seq.extract s17 s15 s20))
[GOOD] (define-fun s22 () Int (seq.len s21))
[GOOD] (define-fun s23 () Bool (= s12 s22))
[GOOD] (define-fun s24 () Int (- s22 s15))
[GOOD] (define-fun s25 () (Seq Int) (seq.extract s21 s15 s24))
[GOOD] (define-fun s26 () Int (seq.len s25))
[GOOD] (define-fun s27 () Bool (= s12 s26))
[GOOD] (define-fun s28 () Int (- s26 s15))
[GOOD] (define-fun s29 () (Seq Int) (seq.extract s25 s15 s28))
[GOOD] (define-fun s30 () Int (seq.len s29))
[GOOD] (define-fun s31 () Bool (= s12 s30))
[GOOD] (define-fun s32 () Int (- s30 s15))
[GOOD] (define-fun s33 () (Seq Int) (seq.extract s29 s15 s32))
[GOOD] (define-fun s34 () Int (seq.len s33))
[GOOD] (define-fun s35 () Bool (= s12 s34))
[GOOD] (define-fun s36 () Int (- s34 s15))
[GOOD] (define-fun s37 () (Seq Int) (seq.extract s33 s15 s36))
[GOOD] (define-fun s38 () Int (seq.len s37))
[GOOD] (define-fun s39 () Bool (= s12 s38))
[GOOD] (define-fun s40 () Int (- s38 s15))
[GOOD] (define-fun s41 () (Seq Int) (seq.extract s37 s15 s40))
[GOOD] (define-fun s42 () Int (seq.len s41))
[GOOD] (define-fun s43 () Bool (= s12 s42))
[GOOD] (define-fun s44 () Int (- s42 s15))
[GOOD] (define-fun s45 () (Seq Int) (seq.extract s41 s15 s44))
[GOOD] (define-fun s46 () Int (seq.len s45))
[GOOD] (define-fun s47 () Bool (= s12 s46))
[GOOD] (define-fun s48 () Int (- s46 s15))
[GOOD] (define-fun s49 () (Seq Int) (seq.extract s45 s15 s48))
[GOOD] (define-fun s50 () Int (seq.len s49))
[GOOD] (define-fun s51 () Bool (= s12 s50))
[GOOD] (define-fun s53 () (Seq Int) (seq.unit s52))
[GOOD] (define-fun s54 () (Seq Int) (seq.extract s49 s12 s15))
[GOOD] (define-fun s55 () Bool (= s53 s54))
[GOOD] (define-fun s56 () Bool (<= s50 s12))
[GOOD] (define-fun s57 () Bool (or s55 s56))
[GOOD] (define-fun s58 () (Seq Int) (ite s51 s14 s53))
[GOOD] (define-fun s60 () (Seq Int) (seq.unit s59))
[GOOD] (define-fun s61 () (Seq Int) (seq.extract s45 s12 s15))
[GOOD] (define-fun s62 () Bool (= s60 s61))
[GOOD] (define-fun s63 () Bool (<= s46 s12))
[GOOD] (define-fun s64 () Bool (or s62 s63))
[GOOD] (define-fun s65 () (Seq Int) (seq.++ s58 s60))
[GOOD] (define-fun s66 () (Seq Int) (ite s47 s14 s65))
[GOOD] (define-fun s68 () (Seq Int) (seq.unit s67))
[GOOD] (define-fun s69 () (Seq Int) (seq.extract s41 s12 s15))
[GOOD] (define-fun s70 () Bool (= s68 s69))
[GOOD] (define-fun s71 () Bool (<= s42 s12))
[GOOD] (define-fun s72 () Bool (or s70 s71))
[GOOD] (define-fun s73 () (Seq Int) (seq.++ s66 s68))
[GOOD] (define-fun s74 () (Seq Int) (ite s43 s14 s73))
[GOOD] (define-fun s76 () (Seq Int) (seq.unit s75))
[GOOD] (define-fun s77 () (Seq Int) (seq.extract s37 s12 s15))
[GOOD] (define-fun s78 () Bool (= s76 s77))
[GOOD] (define-fun s79 () Bool (<= s38 s12))
[GOOD] (define-fun s80 () Bool (or s78 s79))
[GOOD] (define-fun s81 () (Seq Int) (seq.++ s74 s76))
[GOOD] (define-fun s82 () (Seq Int) (ite s39 s14 s81))
[GOOD] (define-fun s84 () (Seq Int) (seq.unit s83))
[GOOD] (define-fun s85 () (Seq Int) (seq.extract s33 s12 s15))
[GOOD] (define-fun s86 () Bool (= s84 s85))
[GOOD] (define-fun s87 () Bool (<= s34 s12))
[GOOD] (define-fun s88 () Bool (or s86 s87))
[GOOD] (define-fun s89 () (Seq Int) (seq.++ s82 s84))
[GOOD] (define-fun s90 () (Seq Int) (ite s35 s14 s89))
[GOOD] (define-fun s92 () (Seq Int) (seq.unit s91))
[GOOD] (define-fun s93 () (Seq Int) (seq.extract s29 s12 s15))
[GOOD] (define-fun s94 () Bool (= s92 s93))
[GOOD] (define-fun s95 () Bool (<= s30 s12))
[GOOD] (define-fun s96 () Bool (or s94 s95))
[GOOD] (define-fun s97 () (Seq Int) (seq.++ s90 s92))
[GOOD] (define-fun s98 () (Seq Int) (ite s31 s14 s97))
[GOOD] (define-fun s100 () (Seq Int) (seq.unit s99))
[GOOD] (define-fun s101 () (Seq Int) (seq.extract s25 s12 s15))
[GOOD] (define-fun s102 () Bool (= s100 s101))
[GOOD] (define-fun s103 () Bool (<= s26 s12))
[GOOD] (define-fun s104 () Bool (or s102 s103))
[GOOD] (define-fun s105 () (Seq Int) (seq.++ s98 s100))
[GOOD] (define-fun s106 () (Seq Int) (ite s27 s14 s105))
[GOOD] (define-fun s108 () (Seq Int) (seq.unit s107))
[GOOD] (define-fun s109 () (Seq Int) (seq.extract s21 s12 s15))
[GOOD] (define-fun s110 () Bool (= s108 s109))
[GOOD] (define-fun s111 () Bool (<= s22 s12))
[GOOD] (define-fun s112 () Bool (or s110 s111))
[GOOD] (define-fun s113 () (Seq Int) (seq.++ s106 s108))
[GOOD] (define-fun s114 () (Seq Int) (ite s23 s14 s113))
[GOOD] (define-fun s116 () (Seq Int) (seq.unit s115))
[GOOD] (define-fun s117 () (Seq Int) (seq.extract s17 s12 s15))
[GOOD] (define-fun s118 () Bool (= s116 s117))
[GOOD] (define-fun s119 () Bool (<= s18 s12))
[GOOD] (define-fun s120 () Bool (or s118 s119))
[GOOD] (define-fun s121 () (Seq Int) (seq.++ s114 s116))
[GOOD] (define-fun s122 () (Seq Int) (ite s19 s14 s121))
[GOOD] (define-fun s124 () (Seq Int) (seq.unit s123))
[GOOD] (define-fun s125 () (Seq Int) (seq.extract s10 s12 s15))
[GOOD] (define-fun s126 () Bool (= s124 s125))
[GOOD] (define-fun s127 () Bool (<= s11 s12))
[GOOD] (define-fun s128 () Bool (or s126 s127))
[GOOD] (define-fun s129 () (Seq Int) (seq.++ s122 s124))
[GOOD] (define-fun s130 () (Seq Int) (ite s13 s14 s129))
[GOOD] (define-fun s131 () (Seq Int) (seq.++ s5 s4))
[GOOD] (define-fun s132 () (Seq Int) (seq.++ s6 s131))
[GOOD] (define-fun s133 () (Seq Int) (seq.++ s7 s132))
[GOOD] (define-fun s134 () Bool (= s130 s133))
[GOOD] (assert s57)
[GOOD] (assert s64)
[GOOD] (assert s72)
[GOOD] (assert s80)
[GOOD] (assert s88)
[GOOD] (assert s96)
[GOOD] (assert s104)
[GOOD] (assert s112)
[GOOD] (assert s120)
[GOOD] (assert s128)
[GOOD] (assert s134)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
