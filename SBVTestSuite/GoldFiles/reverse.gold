** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-logic ALL)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s13 () Int 1)
[GOOD] (define-fun s53 () Int 0)
[GOOD] (define-fun s11 () (Seq Int) (as seq.empty (Seq Int)))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () Int) ; tracks user variable "a"
[GOOD] (declare-fun s1 () Int) ; tracks user variable "b"
[GOOD] (declare-fun s2 () Int) ; tracks user variable "c"
[GOOD] (declare-fun s3 () Int) ; tracks user variable "d"
[GOOD] (declare-fun s50 () Int) ; tracks user variable "__internal_sbv_s50"
[GOOD] (declare-fun s60 () Int) ; tracks user variable "__internal_sbv_s60"
[GOOD] (declare-fun s69 () Int) ; tracks user variable "__internal_sbv_s69"
[GOOD] (declare-fun s78 () Int) ; tracks user variable "__internal_sbv_s78"
[GOOD] (declare-fun s87 () Int) ; tracks user variable "__internal_sbv_s87"
[GOOD] (declare-fun s96 () Int) ; tracks user variable "__internal_sbv_s96"
[GOOD] (declare-fun s105 () Int) ; tracks user variable "__internal_sbv_s105"
[GOOD] (declare-fun s114 () Int) ; tracks user variable "__internal_sbv_s114"
[GOOD] (declare-fun s123 () Int) ; tracks user variable "__internal_sbv_s123"
[GOOD] (declare-fun s132 () Int) ; tracks user variable "__internal_sbv_s132"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s4 () (Seq Int) (seq.unit s0))
[GOOD] (define-fun s5 () (Seq Int) (seq.unit s1))
[GOOD] (define-fun s6 () (Seq Int) (seq.unit s2))
[GOOD] (define-fun s7 () (Seq Int) (seq.unit s3))
[GOOD] (define-fun s8 () (Seq Int) (seq.++ s6 s7))
[GOOD] (define-fun s9 () (Seq Int) (seq.++ s5 s8))
[GOOD] (define-fun s10 () (Seq Int) (seq.++ s4 s9))
[GOOD] (define-fun s12 () Bool (= s10 s11))
[GOOD] (define-fun s14 () Int (seq.len s10))
[GOOD] (define-fun s15 () Int (- s14 s13))
[GOOD] (define-fun s16 () (Seq Int) (seq.extract s10 s13 s15))
[GOOD] (define-fun s17 () Bool (= s11 s16))
[GOOD] (define-fun s18 () Int (seq.len s16))
[GOOD] (define-fun s19 () Int (- s18 s13))
[GOOD] (define-fun s20 () (Seq Int) (seq.extract s16 s13 s19))
[GOOD] (define-fun s21 () Bool (= s11 s20))
[GOOD] (define-fun s22 () Int (seq.len s20))
[GOOD] (define-fun s23 () Int (- s22 s13))
[GOOD] (define-fun s24 () (Seq Int) (seq.extract s20 s13 s23))
[GOOD] (define-fun s25 () Bool (= s11 s24))
[GOOD] (define-fun s26 () Int (seq.len s24))
[GOOD] (define-fun s27 () Int (- s26 s13))
[GOOD] (define-fun s28 () (Seq Int) (seq.extract s24 s13 s27))
[GOOD] (define-fun s29 () Bool (= s11 s28))
[GOOD] (define-fun s30 () Int (seq.len s28))
[GOOD] (define-fun s31 () Int (- s30 s13))
[GOOD] (define-fun s32 () (Seq Int) (seq.extract s28 s13 s31))
[GOOD] (define-fun s33 () Bool (= s11 s32))
[GOOD] (define-fun s34 () Int (seq.len s32))
[GOOD] (define-fun s35 () Int (- s34 s13))
[GOOD] (define-fun s36 () (Seq Int) (seq.extract s32 s13 s35))
[GOOD] (define-fun s37 () Bool (= s11 s36))
[GOOD] (define-fun s38 () Int (seq.len s36))
[GOOD] (define-fun s39 () Int (- s38 s13))
[GOOD] (define-fun s40 () (Seq Int) (seq.extract s36 s13 s39))
[GOOD] (define-fun s41 () Bool (= s11 s40))
[GOOD] (define-fun s42 () Int (seq.len s40))
[GOOD] (define-fun s43 () Int (- s42 s13))
[GOOD] (define-fun s44 () (Seq Int) (seq.extract s40 s13 s43))
[GOOD] (define-fun s45 () Bool (= s11 s44))
[GOOD] (define-fun s46 () Int (seq.len s44))
[GOOD] (define-fun s47 () Int (- s46 s13))
[GOOD] (define-fun s48 () (Seq Int) (seq.extract s44 s13 s47))
[GOOD] (define-fun s49 () Bool (= s11 s48))
[GOOD] (define-fun s51 () (Seq Int) (seq.unit s50))
[GOOD] (define-fun s52 () Int (seq.len s48))
[GOOD] (define-fun s54 () Bool (> s52 s53))
[GOOD] (define-fun s55 () Bool (not s54))
[GOOD] (define-fun s56 () (Seq Int) (seq.extract s48 s53 s13))
[GOOD] (define-fun s57 () Bool (= s51 s56))
[GOOD] (define-fun s58 () Bool (or s55 s57))
[GOOD] (define-fun s59 () (Seq Int) (ite s49 s11 s51))
[GOOD] (define-fun s61 () (Seq Int) (seq.unit s60))
[GOOD] (define-fun s62 () Bool (> s46 s53))
[GOOD] (define-fun s63 () Bool (not s62))
[GOOD] (define-fun s64 () (Seq Int) (seq.extract s44 s53 s13))
[GOOD] (define-fun s65 () Bool (= s61 s64))
[GOOD] (define-fun s66 () Bool (or s63 s65))
[GOOD] (define-fun s67 () (Seq Int) (seq.++ s59 s61))
[GOOD] (define-fun s68 () (Seq Int) (ite s45 s11 s67))
[GOOD] (define-fun s70 () (Seq Int) (seq.unit s69))
[GOOD] (define-fun s71 () Bool (> s42 s53))
[GOOD] (define-fun s72 () Bool (not s71))
[GOOD] (define-fun s73 () (Seq Int) (seq.extract s40 s53 s13))
[GOOD] (define-fun s74 () Bool (= s70 s73))
[GOOD] (define-fun s75 () Bool (or s72 s74))
[GOOD] (define-fun s76 () (Seq Int) (seq.++ s68 s70))
[GOOD] (define-fun s77 () (Seq Int) (ite s41 s11 s76))
[GOOD] (define-fun s79 () (Seq Int) (seq.unit s78))
[GOOD] (define-fun s80 () Bool (> s38 s53))
[GOOD] (define-fun s81 () Bool (not s80))
[GOOD] (define-fun s82 () (Seq Int) (seq.extract s36 s53 s13))
[GOOD] (define-fun s83 () Bool (= s79 s82))
[GOOD] (define-fun s84 () Bool (or s81 s83))
[GOOD] (define-fun s85 () (Seq Int) (seq.++ s77 s79))
[GOOD] (define-fun s86 () (Seq Int) (ite s37 s11 s85))
[GOOD] (define-fun s88 () (Seq Int) (seq.unit s87))
[GOOD] (define-fun s89 () Bool (> s34 s53))
[GOOD] (define-fun s90 () Bool (not s89))
[GOOD] (define-fun s91 () (Seq Int) (seq.extract s32 s53 s13))
[GOOD] (define-fun s92 () Bool (= s88 s91))
[GOOD] (define-fun s93 () Bool (or s90 s92))
[GOOD] (define-fun s94 () (Seq Int) (seq.++ s86 s88))
[GOOD] (define-fun s95 () (Seq Int) (ite s33 s11 s94))
[GOOD] (define-fun s97 () (Seq Int) (seq.unit s96))
[GOOD] (define-fun s98 () Bool (> s30 s53))
[GOOD] (define-fun s99 () Bool (not s98))
[GOOD] (define-fun s100 () (Seq Int) (seq.extract s28 s53 s13))
[GOOD] (define-fun s101 () Bool (= s97 s100))
[GOOD] (define-fun s102 () Bool (or s99 s101))
[GOOD] (define-fun s103 () (Seq Int) (seq.++ s95 s97))
[GOOD] (define-fun s104 () (Seq Int) (ite s29 s11 s103))
[GOOD] (define-fun s106 () (Seq Int) (seq.unit s105))
[GOOD] (define-fun s107 () Bool (> s26 s53))
[GOOD] (define-fun s108 () Bool (not s107))
[GOOD] (define-fun s109 () (Seq Int) (seq.extract s24 s53 s13))
[GOOD] (define-fun s110 () Bool (= s106 s109))
[GOOD] (define-fun s111 () Bool (or s108 s110))
[GOOD] (define-fun s112 () (Seq Int) (seq.++ s104 s106))
[GOOD] (define-fun s113 () (Seq Int) (ite s25 s11 s112))
[GOOD] (define-fun s115 () (Seq Int) (seq.unit s114))
[GOOD] (define-fun s116 () Bool (> s22 s53))
[GOOD] (define-fun s117 () Bool (not s116))
[GOOD] (define-fun s118 () (Seq Int) (seq.extract s20 s53 s13))
[GOOD] (define-fun s119 () Bool (= s115 s118))
[GOOD] (define-fun s120 () Bool (or s117 s119))
[GOOD] (define-fun s121 () (Seq Int) (seq.++ s113 s115))
[GOOD] (define-fun s122 () (Seq Int) (ite s21 s11 s121))
[GOOD] (define-fun s124 () (Seq Int) (seq.unit s123))
[GOOD] (define-fun s125 () Bool (> s18 s53))
[GOOD] (define-fun s126 () Bool (not s125))
[GOOD] (define-fun s127 () (Seq Int) (seq.extract s16 s53 s13))
[GOOD] (define-fun s128 () Bool (= s124 s127))
[GOOD] (define-fun s129 () Bool (or s126 s128))
[GOOD] (define-fun s130 () (Seq Int) (seq.++ s122 s124))
[GOOD] (define-fun s131 () (Seq Int) (ite s17 s11 s130))
[GOOD] (define-fun s133 () (Seq Int) (seq.unit s132))
[GOOD] (define-fun s134 () Bool (> s14 s53))
[GOOD] (define-fun s135 () Bool (not s134))
[GOOD] (define-fun s136 () (Seq Int) (seq.extract s10 s53 s13))
[GOOD] (define-fun s137 () Bool (= s133 s136))
[GOOD] (define-fun s138 () Bool (or s135 s137))
[GOOD] (define-fun s139 () (Seq Int) (seq.++ s131 s133))
[GOOD] (define-fun s140 () (Seq Int) (ite s12 s11 s139))
[GOOD] (define-fun s141 () (Seq Int) (seq.++ s5 s4))
[GOOD] (define-fun s142 () (Seq Int) (seq.++ s6 s141))
[GOOD] (define-fun s143 () (Seq Int) (seq.++ s7 s142))
[GOOD] (define-fun s144 () Bool (= s140 s143))
[GOOD] (assert s58)
[GOOD] (assert s66)
[GOOD] (assert s75)
[GOOD] (assert s84)
[GOOD] (assert s93)
[GOOD] (assert s102)
[GOOD] (assert s111)
[GOOD] (assert s120)
[GOOD] (assert s129)
[GOOD] (assert s138)
[GOOD] (assert s144)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
