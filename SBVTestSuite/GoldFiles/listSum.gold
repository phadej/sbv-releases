** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-logic ALL)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] (declare-datatypes ((SBVSum2 2)) (
         (par (X Y) ( (left (getLeft X)) (right (getRight Y)) ))
       ))
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s2 () Int 2)
[GOOD] (define-fun s6 () Int 0)
[GOOD] (define-fun s9 () Int 1)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (Seq (SBVSum2 Int (_ BitVec 8)))) ; tracks user variable "x"
[GOOD] (declare-fun s4 () (SBVSum2 Int (_ BitVec 8))) ; tracks user variable "__internal_sbv_s4"
[GOOD] (declare-fun s15 () (SBVSum2 Int (_ BitVec 8))) ; tracks user variable "__internal_sbv_s15"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s1 () Int (seq.len s0))
[GOOD] (define-fun s3 () Bool (= s1 s2))
[GOOD] (define-fun s5 () (Seq (SBVSum2 Int (_ BitVec 8))) (seq.unit s4))
[GOOD] (define-fun s7 () Bool (> s1 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s10 () (Seq (SBVSum2 Int (_ BitVec 8))) (seq.extract s0 s6 s9))
[GOOD] (define-fun s11 () Bool (= s5 s10))
[GOOD] (define-fun s12 () Bool (or s8 s11))
[GOOD] (define-fun s13 () Bool ((_ is left) s4))
[GOOD] (define-fun s14 () Bool (ite s13 true false))
[GOOD] (define-fun s16 () (Seq (SBVSum2 Int (_ BitVec 8))) (seq.unit s15))
[GOOD] (define-fun s17 () Int (- s1 s9))
[GOOD] (define-fun s18 () (Seq (SBVSum2 Int (_ BitVec 8))) (seq.extract s0 s9 s17))
[GOOD] (define-fun s19 () Int (seq.len s18))
[GOOD] (define-fun s20 () Bool (> s19 s6))
[GOOD] (define-fun s21 () Bool (not s20))
[GOOD] (define-fun s22 () (Seq (SBVSum2 Int (_ BitVec 8))) (seq.extract s18 s6 s9))
[GOOD] (define-fun s23 () Bool (= s16 s22))
[GOOD] (define-fun s24 () Bool (or s21 s23))
[GOOD] (define-fun s25 () Bool ((_ is left) s15))
[GOOD] (define-fun s26 () Bool (ite s25 false true))
[GOOD] (assert s3)
[GOOD] (assert s12)
[GOOD] (assert s14)
[GOOD] (assert s24)
[GOOD] (assert s26)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
