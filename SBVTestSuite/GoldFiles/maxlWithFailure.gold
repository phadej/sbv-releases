** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-logic ALL)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s2 () Int 0)
[GOOD] (define-fun s4 () Int 1)
[GOOD] (define-fun s131 () Int 10)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (Seq Int)) ; tracks user variable "ints"
[GOOD] (declare-fun s9 () Int) ; tracks user variable "__internal_sbv_s9"
[GOOD] (declare-fun s21 () Int) ; tracks user variable "__internal_sbv_s21"
[GOOD] (declare-fun s33 () Int) ; tracks user variable "__internal_sbv_s33"
[GOOD] (declare-fun s45 () Int) ; tracks user variable "__internal_sbv_s45"
[GOOD] (declare-fun s57 () Int) ; tracks user variable "__internal_sbv_s57"
[GOOD] (declare-fun s69 () Int) ; tracks user variable "__internal_sbv_s69"
[GOOD] (declare-fun s81 () Int) ; tracks user variable "__internal_sbv_s81"
[GOOD] (declare-fun s93 () Int) ; tracks user variable "__internal_sbv_s93"
[GOOD] (declare-fun s105 () Int) ; tracks user variable "__internal_sbv_s105"
[GOOD] (declare-fun s113 () Int) ; tracks user variable "__internal_sbv_s113"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s1 () Int (seq.len s0))
[GOOD] (define-fun s3 () Bool (= s1 s2))
[GOOD] (define-fun s5 () Int (- s1 s4))
[GOOD] (define-fun s6 () (Seq Int) (seq.extract s0 s4 s5))
[GOOD] (define-fun s7 () Int (seq.len s6))
[GOOD] (define-fun s8 () Bool (= s2 s7))
[GOOD] (define-fun s10 () (Seq Int) (seq.unit s9))
[GOOD] (define-fun s11 () (Seq Int) (seq.extract s0 s2 s4))
[GOOD] (define-fun s12 () Bool (= s10 s11))
[GOOD] (define-fun s13 () Bool (<= s1 s2))
[GOOD] (define-fun s14 () Bool (or s12 s13))
[GOOD] (define-fun s15 () Bool (<= s9 s2))
[GOOD] (define-fun s16 () Int (ite s15 s2 s9))
[GOOD] (define-fun s17 () Int (- s7 s4))
[GOOD] (define-fun s18 () (Seq Int) (seq.extract s6 s4 s17))
[GOOD] (define-fun s19 () Int (seq.len s18))
[GOOD] (define-fun s20 () Bool (= s2 s19))
[GOOD] (define-fun s22 () (Seq Int) (seq.unit s21))
[GOOD] (define-fun s23 () (Seq Int) (seq.extract s6 s2 s4))
[GOOD] (define-fun s24 () Bool (= s22 s23))
[GOOD] (define-fun s25 () Bool (<= s7 s2))
[GOOD] (define-fun s26 () Bool (or s24 s25))
[GOOD] (define-fun s27 () Bool (<= s21 s16))
[GOOD] (define-fun s28 () Int (ite s27 s16 s21))
[GOOD] (define-fun s29 () Int (- s19 s4))
[GOOD] (define-fun s30 () (Seq Int) (seq.extract s18 s4 s29))
[GOOD] (define-fun s31 () Int (seq.len s30))
[GOOD] (define-fun s32 () Bool (= s2 s31))
[GOOD] (define-fun s34 () (Seq Int) (seq.unit s33))
[GOOD] (define-fun s35 () (Seq Int) (seq.extract s18 s2 s4))
[GOOD] (define-fun s36 () Bool (= s34 s35))
[GOOD] (define-fun s37 () Bool (<= s19 s2))
[GOOD] (define-fun s38 () Bool (or s36 s37))
[GOOD] (define-fun s39 () Bool (<= s33 s28))
[GOOD] (define-fun s40 () Int (ite s39 s28 s33))
[GOOD] (define-fun s41 () Int (- s31 s4))
[GOOD] (define-fun s42 () (Seq Int) (seq.extract s30 s4 s41))
[GOOD] (define-fun s43 () Int (seq.len s42))
[GOOD] (define-fun s44 () Bool (= s2 s43))
[GOOD] (define-fun s46 () (Seq Int) (seq.unit s45))
[GOOD] (define-fun s47 () (Seq Int) (seq.extract s30 s2 s4))
[GOOD] (define-fun s48 () Bool (= s46 s47))
[GOOD] (define-fun s49 () Bool (<= s31 s2))
[GOOD] (define-fun s50 () Bool (or s48 s49))
[GOOD] (define-fun s51 () Bool (<= s45 s40))
[GOOD] (define-fun s52 () Int (ite s51 s40 s45))
[GOOD] (define-fun s53 () Int (- s43 s4))
[GOOD] (define-fun s54 () (Seq Int) (seq.extract s42 s4 s53))
[GOOD] (define-fun s55 () Int (seq.len s54))
[GOOD] (define-fun s56 () Bool (= s2 s55))
[GOOD] (define-fun s58 () (Seq Int) (seq.unit s57))
[GOOD] (define-fun s59 () (Seq Int) (seq.extract s42 s2 s4))
[GOOD] (define-fun s60 () Bool (= s58 s59))
[GOOD] (define-fun s61 () Bool (<= s43 s2))
[GOOD] (define-fun s62 () Bool (or s60 s61))
[GOOD] (define-fun s63 () Bool (<= s57 s52))
[GOOD] (define-fun s64 () Int (ite s63 s52 s57))
[GOOD] (define-fun s65 () Int (- s55 s4))
[GOOD] (define-fun s66 () (Seq Int) (seq.extract s54 s4 s65))
[GOOD] (define-fun s67 () Int (seq.len s66))
[GOOD] (define-fun s68 () Bool (= s2 s67))
[GOOD] (define-fun s70 () (Seq Int) (seq.unit s69))
[GOOD] (define-fun s71 () (Seq Int) (seq.extract s54 s2 s4))
[GOOD] (define-fun s72 () Bool (= s70 s71))
[GOOD] (define-fun s73 () Bool (<= s55 s2))
[GOOD] (define-fun s74 () Bool (or s72 s73))
[GOOD] (define-fun s75 () Bool (<= s69 s64))
[GOOD] (define-fun s76 () Int (ite s75 s64 s69))
[GOOD] (define-fun s77 () Int (- s67 s4))
[GOOD] (define-fun s78 () (Seq Int) (seq.extract s66 s4 s77))
[GOOD] (define-fun s79 () Int (seq.len s78))
[GOOD] (define-fun s80 () Bool (= s2 s79))
[GOOD] (define-fun s82 () (Seq Int) (seq.unit s81))
[GOOD] (define-fun s83 () (Seq Int) (seq.extract s66 s2 s4))
[GOOD] (define-fun s84 () Bool (= s82 s83))
[GOOD] (define-fun s85 () Bool (<= s67 s2))
[GOOD] (define-fun s86 () Bool (or s84 s85))
[GOOD] (define-fun s87 () Bool (<= s81 s76))
[GOOD] (define-fun s88 () Int (ite s87 s76 s81))
[GOOD] (define-fun s89 () Int (- s79 s4))
[GOOD] (define-fun s90 () (Seq Int) (seq.extract s78 s4 s89))
[GOOD] (define-fun s91 () Int (seq.len s90))
[GOOD] (define-fun s92 () Bool (= s2 s91))
[GOOD] (define-fun s94 () (Seq Int) (seq.unit s93))
[GOOD] (define-fun s95 () (Seq Int) (seq.extract s78 s2 s4))
[GOOD] (define-fun s96 () Bool (= s94 s95))
[GOOD] (define-fun s97 () Bool (<= s79 s2))
[GOOD] (define-fun s98 () Bool (or s96 s97))
[GOOD] (define-fun s99 () Bool (<= s93 s88))
[GOOD] (define-fun s100 () Int (ite s99 s88 s93))
[GOOD] (define-fun s101 () Int (- s91 s4))
[GOOD] (define-fun s102 () (Seq Int) (seq.extract s90 s4 s101))
[GOOD] (define-fun s103 () Int (seq.len s102))
[GOOD] (define-fun s104 () Bool (= s2 s103))
[GOOD] (define-fun s106 () (Seq Int) (seq.unit s105))
[GOOD] (define-fun s107 () (Seq Int) (seq.extract s90 s2 s4))
[GOOD] (define-fun s108 () Bool (= s106 s107))
[GOOD] (define-fun s109 () Bool (<= s91 s2))
[GOOD] (define-fun s110 () Bool (or s108 s109))
[GOOD] (define-fun s111 () Bool (<= s105 s100))
[GOOD] (define-fun s112 () Int (ite s111 s100 s105))
[GOOD] (define-fun s114 () (Seq Int) (seq.unit s113))
[GOOD] (define-fun s115 () (Seq Int) (seq.extract s102 s2 s4))
[GOOD] (define-fun s116 () Bool (= s114 s115))
[GOOD] (define-fun s117 () Bool (<= s103 s2))
[GOOD] (define-fun s118 () Bool (or s116 s117))
[GOOD] (define-fun s119 () Bool (<= s113 s112))
[GOOD] (define-fun s120 () Int (ite s119 s112 s113))
[GOOD] (define-fun s121 () Int (ite s104 s112 s120))
[GOOD] (define-fun s122 () Int (ite s92 s100 s121))
[GOOD] (define-fun s123 () Int (ite s80 s88 s122))
[GOOD] (define-fun s124 () Int (ite s68 s76 s123))
[GOOD] (define-fun s125 () Int (ite s56 s64 s124))
[GOOD] (define-fun s126 () Int (ite s44 s52 s125))
[GOOD] (define-fun s127 () Int (ite s32 s40 s126))
[GOOD] (define-fun s128 () Int (ite s20 s28 s127))
[GOOD] (define-fun s129 () Int (ite s8 s16 s128))
[GOOD] (define-fun s130 () Int (ite s3 s2 s129))
[GOOD] (define-fun s132 () Bool (> s130 s131))
[GOOD] (define-fun s133 () Bool (not s132))
[GOOD] (define-fun s134 () Bool (< s9 s2))
[GOOD] (define-fun s135 () Bool (> s9 s131))
[GOOD] (define-fun s136 () Bool (or s134 s135))
[GOOD] (define-fun s137 () Bool (< s21 s2))
[GOOD] (define-fun s138 () Bool (> s21 s131))
[GOOD] (define-fun s139 () Bool (or s137 s138))
[GOOD] (define-fun s140 () Bool (or s136 s139))
[GOOD] (define-fun s141 () Bool (< s33 s2))
[GOOD] (define-fun s142 () Bool (> s33 s131))
[GOOD] (define-fun s143 () Bool (or s141 s142))
[GOOD] (define-fun s144 () Bool (or s140 s143))
[GOOD] (define-fun s145 () Bool (< s45 s2))
[GOOD] (define-fun s146 () Bool (> s45 s131))
[GOOD] (define-fun s147 () Bool (or s145 s146))
[GOOD] (define-fun s148 () Bool (or s144 s147))
[GOOD] (define-fun s149 () Bool (< s57 s2))
[GOOD] (define-fun s150 () Bool (> s57 s131))
[GOOD] (define-fun s151 () Bool (or s149 s150))
[GOOD] (define-fun s152 () Bool (or s148 s151))
[GOOD] (define-fun s153 () Bool (< s69 s2))
[GOOD] (define-fun s154 () Bool (> s69 s131))
[GOOD] (define-fun s155 () Bool (or s153 s154))
[GOOD] (define-fun s156 () Bool (or s152 s155))
[GOOD] (define-fun s157 () Bool (< s81 s2))
[GOOD] (define-fun s158 () Bool (> s81 s131))
[GOOD] (define-fun s159 () Bool (or s157 s158))
[GOOD] (define-fun s160 () Bool (or s156 s159))
[GOOD] (define-fun s161 () Bool (< s93 s2))
[GOOD] (define-fun s162 () Bool (> s93 s131))
[GOOD] (define-fun s163 () Bool (or s161 s162))
[GOOD] (define-fun s164 () Bool (or s160 s163))
[GOOD] (define-fun s165 () Bool (< s105 s2))
[GOOD] (define-fun s166 () Bool (> s105 s131))
[GOOD] (define-fun s167 () Bool (or s165 s166))
[GOOD] (define-fun s168 () Bool (or s164 s167))
[GOOD] (define-fun s169 () Bool (< s113 s2))
[GOOD] (define-fun s170 () Bool (> s113 s131))
[GOOD] (define-fun s171 () Bool (or s169 s170))
[GOOD] (define-fun s172 () Bool (or s168 s171))
[GOOD] (define-fun s173 () Bool (ite s104 s168 s172))
[GOOD] (define-fun s174 () Bool (ite s92 s164 s173))
[GOOD] (define-fun s175 () Bool (ite s80 s160 s174))
[GOOD] (define-fun s176 () Bool (ite s68 s156 s175))
[GOOD] (define-fun s177 () Bool (ite s56 s152 s176))
[GOOD] (define-fun s178 () Bool (ite s44 s148 s177))
[GOOD] (define-fun s179 () Bool (ite s32 s144 s178))
[GOOD] (define-fun s180 () Bool (ite s20 s140 s179))
[GOOD] (define-fun s181 () Bool (ite s8 s136 s180))
[GOOD] (define-fun s182 () Bool (not s3))
[GOOD] (define-fun s183 () Bool (and s181 s182))
[GOOD] (define-fun s184 () Bool (or s133 s183))
[GOOD] (assert s14)
[GOOD] (assert s26)
[GOOD] (assert s38)
[GOOD] (assert s50)
[GOOD] (assert s62)
[GOOD] (assert s74)
[GOOD] (assert s86)
[GOOD] (assert s98)
[GOOD] (assert s110)
[GOOD] (assert s118)
[GOOD] (assert s184)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
