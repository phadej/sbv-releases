** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-interpolants true)
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () Int 0)
[GOOD] (define-fun s7 () Int 1)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () Int) ; tracks user variable "x"
[GOOD] (declare-fun s1 () Int) ; tracks user variable "y"
[GOOD] (declare-fun s2 () Int) ; tracks user variable "z"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] (declare-fun array_0 () (Array Int Int))
[GOOD] (declare-fun array_1 () (Array Int Int))
[GOOD] (declare-fun array_2 () (Array Int Int))
[GOOD] (declare-fun array_3 () (Array Int Int))
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s4 () Bool (= array_1 array_3))
[GOOD] (define-fun s5 () Bool (= s0 s2))
[GOOD] (define-fun s6 () Int (select array_1 s2))
[GOOD] (define-fun s8 () Bool (= s6 s7))
[GOOD] (define-fun s9 () Bool (and s5 s8))
[GOOD] (assert (= array_2 (store array_0 s0 s3)))
[GOOD] (assert (= array_3 (store array_2 s1 s3)))
[GOOD] (assert (! s4 :named |c1|))
[GOOD] (assert (! s9 :named |c2|))
[SEND] (check-sat)
[RECV] unsat
[SEND] (get-interpolant |c1| |c2|)
[RECV] (interpolants
        (= array_1 (store array_2 s1 0)))
*** Solver   : Z3
*** Exit code: ExitSuccess

FINAL OUTPUT:
["(= array_1 (store array_2 s1 0))"]
