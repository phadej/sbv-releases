** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-logic ALL) ; has sets, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s1 () (Array (_ BitVec 8) Bool) (store (store (store (store ((as const (Array (_ BitVec 8) Bool)) false) #x6f true) #x6c true) #x68 true) #x65 true))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (Array (_ BitVec 8) Bool)) ; tracks user variable "a"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (assert s2)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 (store (store (store (store ((as const (Array (_ BitVec 8) Bool)) false)
                                   #x65
                                   true)
                            #x68
                            true)
                     #x6c
                     true)
              #x6f
              true)))
[GOOD] (define-fun s3 () (Array (_ BitVec 8) Bool) ((_ map not) s0))
[SEND] (get-value (s3))
[RECV] ((s3 (store (store (store (store ((as const (Array (_ BitVec 8) Bool)) true)
                                   #x65
                                   false)
                            #x68
                            false)
                     #x6c
                     false)
              #x6f
              false)))
[GOOD] (define-fun s4 () (Array (_ BitVec 8) Bool) ((_ map not) s3))
[SEND] (get-value (s4))
[RECV] ((s4 (store (store (store (store ((as const (Array (_ BitVec 8) Bool)) false)
                                   #x65
                                   true)
                            #x68
                            true)
                     #x6c
                     true)
              #x6f
              true)))
[GOOD] (define-fun s5 () (Array (_ BitVec 8) Bool) ((_ map and) s3 s0))
[SEND] (get-value (s5))
[RECV] ((s5 ((as const (Array (_ BitVec 8) Bool)) false)))
[GOOD] (define-fun s6 () (Array (_ BitVec 8) Bool) ((_ map or) s3 s0))
[SEND] (get-value (s6))
[RECV] ((s6 ((as const (Array (_ BitVec 8) Bool)) true)))
*** Solver   : Z3
*** Exit code: ExitSuccess

FINAL:
({'e','h','l','o'},U - {'e','h','l','o'},{'e','h','l','o'},{},U)
DONE!
