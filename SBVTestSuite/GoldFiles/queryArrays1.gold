** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic ALL) ; external query, using all logics.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- literal constants ---
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 8)) ; tracks user variable "a1"
[GOOD] (declare-fun s1 () (_ BitVec 8)) ; tracks user variable "a2"
[GOOD] (declare-fun s3 () (_ BitVec 8)) ; tracks user variable "v1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] (declare-fun array_0 () (Array (_ BitVec 8) (_ BitVec 8)))
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (distinct s0 s1))
[GOOD] (assert s2)
[GOOD] (declare-fun array_1 () (Array (_ BitVec 8) (_ BitVec 8)))
[GOOD] (define-fun s4 () (_ BitVec 8) (select array_1 s0))
[GOOD] (define-fun s5 () Bool (= s3 s4))
[GOOD] (assert (= array_1 (store array_0 s0 s3)))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x00))
[SEND] (get-value (s1))
[RECV] ((s1 #xff))
[SEND] (get-value (s3))
[RECV] ((s3 #x00))
*** Solver   : Z3
*** Exit code: ExitSuccess

 FINAL:(0,255,0)
DONE!
