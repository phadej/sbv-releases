** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-logic ALL)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s5 () Int 6)
[GOOD] (define-fun s7 () Int 0)
[GOOD] (define-fun s20 () Int 1)
[GOOD] (define-fun s64 () Int 10)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () Int) ; tracks user variable "a"
[GOOD] (declare-fun s1 () Int) ; tracks user variable "b"
[GOOD] (declare-fun s2 () Int) ; tracks user variable "c"
[GOOD] (declare-fun s57 () Int) ; tracks user variable "__internal_sbv_s57"
[GOOD] (declare-fun s69 () Int) ; tracks user variable "__internal_sbv_s69"
[GOOD] (declare-fun s81 () Int) ; tracks user variable "__internal_sbv_s81"
[GOOD] (declare-fun s93 () Int) ; tracks user variable "__internal_sbv_s93"
[GOOD] (declare-fun s105 () Int) ; tracks user variable "__internal_sbv_s105"
[GOOD] (declare-fun s117 () Int) ; tracks user variable "__internal_sbv_s117"
[GOOD] (declare-fun s129 () Int) ; tracks user variable "__internal_sbv_s129"
[GOOD] (declare-fun s141 () Int) ; tracks user variable "__internal_sbv_s141"
[GOOD] (declare-fun s153 () Int) ; tracks user variable "__internal_sbv_s153"
[GOOD] (declare-fun s165 () Int) ; tracks user variable "__internal_sbv_s165"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s3 () Int (+ s0 s1))
[GOOD] (define-fun s4 () Int (+ s2 s3))
[GOOD] (define-fun s6 () Bool (= s4 s5))
[GOOD] (define-fun s8 () Bool (> s0 s7))
[GOOD] (define-fun s9 () Bool (> s1 s7))
[GOOD] (define-fun s10 () Bool (> s2 s7))
[GOOD] (define-fun s11 () Bool (and s9 s10))
[GOOD] (define-fun s12 () Bool (and s8 s11))
[GOOD] (define-fun s13 () (Seq Int) (seq.unit s0))
[GOOD] (define-fun s14 () (Seq Int) (seq.unit s1))
[GOOD] (define-fun s15 () (Seq Int) (seq.unit s2))
[GOOD] (define-fun s16 () (Seq Int) (seq.++ s14 s15))
[GOOD] (define-fun s17 () (Seq Int) (seq.++ s13 s16))
[GOOD] (define-fun s18 () Int (seq.len s17))
[GOOD] (define-fun s19 () Bool (= s7 s18))
[GOOD] (define-fun s21 () Int (- s18 s20))
[GOOD] (define-fun s22 () (Seq Int) (seq.extract s17 s20 s21))
[GOOD] (define-fun s23 () Int (seq.len s22))
[GOOD] (define-fun s24 () Bool (= s7 s23))
[GOOD] (define-fun s25 () Int (- s23 s20))
[GOOD] (define-fun s26 () (Seq Int) (seq.extract s22 s20 s25))
[GOOD] (define-fun s27 () Int (seq.len s26))
[GOOD] (define-fun s28 () Bool (= s7 s27))
[GOOD] (define-fun s29 () Int (- s27 s20))
[GOOD] (define-fun s30 () (Seq Int) (seq.extract s26 s20 s29))
[GOOD] (define-fun s31 () Int (seq.len s30))
[GOOD] (define-fun s32 () Bool (= s7 s31))
[GOOD] (define-fun s33 () Int (- s31 s20))
[GOOD] (define-fun s34 () (Seq Int) (seq.extract s30 s20 s33))
[GOOD] (define-fun s35 () Int (seq.len s34))
[GOOD] (define-fun s36 () Bool (= s7 s35))
[GOOD] (define-fun s37 () Int (- s35 s20))
[GOOD] (define-fun s38 () (Seq Int) (seq.extract s34 s20 s37))
[GOOD] (define-fun s39 () Int (seq.len s38))
[GOOD] (define-fun s40 () Bool (= s7 s39))
[GOOD] (define-fun s41 () Int (- s39 s20))
[GOOD] (define-fun s42 () (Seq Int) (seq.extract s38 s20 s41))
[GOOD] (define-fun s43 () Int (seq.len s42))
[GOOD] (define-fun s44 () Bool (= s7 s43))
[GOOD] (define-fun s45 () Int (- s43 s20))
[GOOD] (define-fun s46 () (Seq Int) (seq.extract s42 s20 s45))
[GOOD] (define-fun s47 () Int (seq.len s46))
[GOOD] (define-fun s48 () Bool (= s7 s47))
[GOOD] (define-fun s49 () Int (- s47 s20))
[GOOD] (define-fun s50 () (Seq Int) (seq.extract s46 s20 s49))
[GOOD] (define-fun s51 () Int (seq.len s50))
[GOOD] (define-fun s52 () Bool (= s7 s51))
[GOOD] (define-fun s53 () Int (- s51 s20))
[GOOD] (define-fun s54 () (Seq Int) (seq.extract s50 s20 s53))
[GOOD] (define-fun s55 () Int (seq.len s54))
[GOOD] (define-fun s56 () Bool (= s7 s55))
[GOOD] (define-fun s58 () (Seq Int) (seq.unit s57))
[GOOD] (define-fun s59 () (Seq Int) (seq.extract s54 s7 s20))
[GOOD] (define-fun s60 () Bool (= s58 s59))
[GOOD] (define-fun s61 () Bool (<= s55 s7))
[GOOD] (define-fun s62 () Bool (or s60 s61))
[GOOD] (define-fun s63 () Bool (< s57 s7))
[GOOD] (define-fun s65 () Bool (> s57 s64))
[GOOD] (define-fun s66 () Bool (or s63 s65))
[GOOD] (define-fun s67 () Bool (not s56))
[GOOD] (define-fun s68 () Bool (and s66 s67))
[GOOD] (define-fun s70 () (Seq Int) (seq.unit s69))
[GOOD] (define-fun s71 () (Seq Int) (seq.extract s50 s7 s20))
[GOOD] (define-fun s72 () Bool (= s70 s71))
[GOOD] (define-fun s73 () Bool (<= s51 s7))
[GOOD] (define-fun s74 () Bool (or s72 s73))
[GOOD] (define-fun s75 () Bool (< s69 s7))
[GOOD] (define-fun s76 () Bool (> s69 s64))
[GOOD] (define-fun s77 () Bool (or s75 s76))
[GOOD] (define-fun s78 () Bool (or s68 s77))
[GOOD] (define-fun s79 () Bool (not s52))
[GOOD] (define-fun s80 () Bool (and s78 s79))
[GOOD] (define-fun s82 () (Seq Int) (seq.unit s81))
[GOOD] (define-fun s83 () (Seq Int) (seq.extract s46 s7 s20))
[GOOD] (define-fun s84 () Bool (= s82 s83))
[GOOD] (define-fun s85 () Bool (<= s47 s7))
[GOOD] (define-fun s86 () Bool (or s84 s85))
[GOOD] (define-fun s87 () Bool (< s81 s7))
[GOOD] (define-fun s88 () Bool (> s81 s64))
[GOOD] (define-fun s89 () Bool (or s87 s88))
[GOOD] (define-fun s90 () Bool (or s80 s89))
[GOOD] (define-fun s91 () Bool (not s48))
[GOOD] (define-fun s92 () Bool (and s90 s91))
[GOOD] (define-fun s94 () (Seq Int) (seq.unit s93))
[GOOD] (define-fun s95 () (Seq Int) (seq.extract s42 s7 s20))
[GOOD] (define-fun s96 () Bool (= s94 s95))
[GOOD] (define-fun s97 () Bool (<= s43 s7))
[GOOD] (define-fun s98 () Bool (or s96 s97))
[GOOD] (define-fun s99 () Bool (< s93 s7))
[GOOD] (define-fun s100 () Bool (> s93 s64))
[GOOD] (define-fun s101 () Bool (or s99 s100))
[GOOD] (define-fun s102 () Bool (or s92 s101))
[GOOD] (define-fun s103 () Bool (not s44))
[GOOD] (define-fun s104 () Bool (and s102 s103))
[GOOD] (define-fun s106 () (Seq Int) (seq.unit s105))
[GOOD] (define-fun s107 () (Seq Int) (seq.extract s38 s7 s20))
[GOOD] (define-fun s108 () Bool (= s106 s107))
[GOOD] (define-fun s109 () Bool (<= s39 s7))
[GOOD] (define-fun s110 () Bool (or s108 s109))
[GOOD] (define-fun s111 () Bool (< s105 s7))
[GOOD] (define-fun s112 () Bool (> s105 s64))
[GOOD] (define-fun s113 () Bool (or s111 s112))
[GOOD] (define-fun s114 () Bool (or s104 s113))
[GOOD] (define-fun s115 () Bool (not s40))
[GOOD] (define-fun s116 () Bool (and s114 s115))
[GOOD] (define-fun s118 () (Seq Int) (seq.unit s117))
[GOOD] (define-fun s119 () (Seq Int) (seq.extract s34 s7 s20))
[GOOD] (define-fun s120 () Bool (= s118 s119))
[GOOD] (define-fun s121 () Bool (<= s35 s7))
[GOOD] (define-fun s122 () Bool (or s120 s121))
[GOOD] (define-fun s123 () Bool (< s117 s7))
[GOOD] (define-fun s124 () Bool (> s117 s64))
[GOOD] (define-fun s125 () Bool (or s123 s124))
[GOOD] (define-fun s126 () Bool (or s116 s125))
[GOOD] (define-fun s127 () Bool (not s36))
[GOOD] (define-fun s128 () Bool (and s126 s127))
[GOOD] (define-fun s130 () (Seq Int) (seq.unit s129))
[GOOD] (define-fun s131 () (Seq Int) (seq.extract s30 s7 s20))
[GOOD] (define-fun s132 () Bool (= s130 s131))
[GOOD] (define-fun s133 () Bool (<= s31 s7))
[GOOD] (define-fun s134 () Bool (or s132 s133))
[GOOD] (define-fun s135 () Bool (< s129 s7))
[GOOD] (define-fun s136 () Bool (> s129 s64))
[GOOD] (define-fun s137 () Bool (or s135 s136))
[GOOD] (define-fun s138 () Bool (or s128 s137))
[GOOD] (define-fun s139 () Bool (not s32))
[GOOD] (define-fun s140 () Bool (and s138 s139))
[GOOD] (define-fun s142 () (Seq Int) (seq.unit s141))
[GOOD] (define-fun s143 () (Seq Int) (seq.extract s26 s7 s20))
[GOOD] (define-fun s144 () Bool (= s142 s143))
[GOOD] (define-fun s145 () Bool (<= s27 s7))
[GOOD] (define-fun s146 () Bool (or s144 s145))
[GOOD] (define-fun s147 () Bool (< s141 s7))
[GOOD] (define-fun s148 () Bool (> s141 s64))
[GOOD] (define-fun s149 () Bool (or s147 s148))
[GOOD] (define-fun s150 () Bool (or s140 s149))
[GOOD] (define-fun s151 () Bool (not s28))
[GOOD] (define-fun s152 () Bool (and s150 s151))
[GOOD] (define-fun s154 () (Seq Int) (seq.unit s153))
[GOOD] (define-fun s155 () (Seq Int) (seq.extract s22 s7 s20))
[GOOD] (define-fun s156 () Bool (= s154 s155))
[GOOD] (define-fun s157 () Bool (<= s23 s7))
[GOOD] (define-fun s158 () Bool (or s156 s157))
[GOOD] (define-fun s159 () Bool (< s153 s7))
[GOOD] (define-fun s160 () Bool (> s153 s64))
[GOOD] (define-fun s161 () Bool (or s159 s160))
[GOOD] (define-fun s162 () Bool (or s152 s161))
[GOOD] (define-fun s163 () Bool (not s24))
[GOOD] (define-fun s164 () Bool (and s162 s163))
[GOOD] (define-fun s166 () (Seq Int) (seq.unit s165))
[GOOD] (define-fun s167 () (Seq Int) (seq.extract s17 s7 s20))
[GOOD] (define-fun s168 () Bool (= s166 s167))
[GOOD] (define-fun s169 () Bool (<= s18 s7))
[GOOD] (define-fun s170 () Bool (or s168 s169))
[GOOD] (define-fun s171 () Bool (< s165 s7))
[GOOD] (define-fun s172 () Bool (> s165 s64))
[GOOD] (define-fun s173 () Bool (or s171 s172))
[GOOD] (define-fun s174 () Bool (or s164 s173))
[GOOD] (define-fun s175 () Bool (not s19))
[GOOD] (define-fun s176 () Bool (and s174 s175))
[GOOD] (assert s6)
[GOOD] (assert s12)
[GOOD] (assert s62)
[GOOD] (assert s74)
[GOOD] (assert s86)
[GOOD] (assert s98)
[GOOD] (assert s110)
[GOOD] (assert s122)
[GOOD] (assert s134)
[GOOD] (assert s146)
[GOOD] (assert s158)
[GOOD] (assert s170)
[GOOD] (assert s176)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
