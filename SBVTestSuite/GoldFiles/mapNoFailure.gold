** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-logic ALL)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s5 () Int 6)
[GOOD] (define-fun s7 () Int 0)
[GOOD] (define-fun s20 () Int 1)
[GOOD] (define-fun s66 () Int 10)
[GOOD] (define-fun s18 () (Seq Int) (as seq.empty (Seq Int)))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () Int) ; tracks user variable "a"
[GOOD] (declare-fun s1 () Int) ; tracks user variable "b"
[GOOD] (declare-fun s2 () Int) ; tracks user variable "c"
[GOOD] (declare-fun s57 () Int) ; tracks user variable "__internal_sbv_s57"
[GOOD] (declare-fun s70 () Int) ; tracks user variable "__internal_sbv_s70"
[GOOD] (declare-fun s82 () Int) ; tracks user variable "__internal_sbv_s82"
[GOOD] (declare-fun s94 () Int) ; tracks user variable "__internal_sbv_s94"
[GOOD] (declare-fun s106 () Int) ; tracks user variable "__internal_sbv_s106"
[GOOD] (declare-fun s118 () Int) ; tracks user variable "__internal_sbv_s118"
[GOOD] (declare-fun s130 () Int) ; tracks user variable "__internal_sbv_s130"
[GOOD] (declare-fun s142 () Int) ; tracks user variable "__internal_sbv_s142"
[GOOD] (declare-fun s154 () Int) ; tracks user variable "__internal_sbv_s154"
[GOOD] (declare-fun s166 () Int) ; tracks user variable "__internal_sbv_s166"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s3 () Int (+ s0 s1))
[GOOD] (define-fun s4 () Int (+ s2 s3))
[GOOD] (define-fun s6 () Bool (= s4 s5))
[GOOD] (define-fun s8 () Bool (> s0 s7))
[GOOD] (define-fun s9 () Bool (> s1 s7))
[GOOD] (define-fun s10 () Bool (> s2 s7))
[GOOD] (define-fun s11 () Bool (and s9 s10))
[GOOD] (define-fun s12 () Bool (and s8 s11))
[GOOD] (define-fun s13 () (Seq Int) (seq.unit s0))
[GOOD] (define-fun s14 () (Seq Int) (seq.unit s1))
[GOOD] (define-fun s15 () (Seq Int) (seq.unit s2))
[GOOD] (define-fun s16 () (Seq Int) (seq.++ s14 s15))
[GOOD] (define-fun s17 () (Seq Int) (seq.++ s13 s16))
[GOOD] (define-fun s19 () Bool (= s17 s18))
[GOOD] (define-fun s21 () Int (seq.len s17))
[GOOD] (define-fun s22 () Int (- s21 s20))
[GOOD] (define-fun s23 () (Seq Int) (seq.extract s17 s20 s22))
[GOOD] (define-fun s24 () Bool (= s18 s23))
[GOOD] (define-fun s25 () Int (seq.len s23))
[GOOD] (define-fun s26 () Int (- s25 s20))
[GOOD] (define-fun s27 () (Seq Int) (seq.extract s23 s20 s26))
[GOOD] (define-fun s28 () Bool (= s18 s27))
[GOOD] (define-fun s29 () Int (seq.len s27))
[GOOD] (define-fun s30 () Int (- s29 s20))
[GOOD] (define-fun s31 () (Seq Int) (seq.extract s27 s20 s30))
[GOOD] (define-fun s32 () Bool (= s18 s31))
[GOOD] (define-fun s33 () Int (seq.len s31))
[GOOD] (define-fun s34 () Int (- s33 s20))
[GOOD] (define-fun s35 () (Seq Int) (seq.extract s31 s20 s34))
[GOOD] (define-fun s36 () Bool (= s18 s35))
[GOOD] (define-fun s37 () Int (seq.len s35))
[GOOD] (define-fun s38 () Int (- s37 s20))
[GOOD] (define-fun s39 () (Seq Int) (seq.extract s35 s20 s38))
[GOOD] (define-fun s40 () Bool (= s18 s39))
[GOOD] (define-fun s41 () Int (seq.len s39))
[GOOD] (define-fun s42 () Int (- s41 s20))
[GOOD] (define-fun s43 () (Seq Int) (seq.extract s39 s20 s42))
[GOOD] (define-fun s44 () Bool (= s18 s43))
[GOOD] (define-fun s45 () Int (seq.len s43))
[GOOD] (define-fun s46 () Int (- s45 s20))
[GOOD] (define-fun s47 () (Seq Int) (seq.extract s43 s20 s46))
[GOOD] (define-fun s48 () Bool (= s18 s47))
[GOOD] (define-fun s49 () Int (seq.len s47))
[GOOD] (define-fun s50 () Int (- s49 s20))
[GOOD] (define-fun s51 () (Seq Int) (seq.extract s47 s20 s50))
[GOOD] (define-fun s52 () Bool (= s18 s51))
[GOOD] (define-fun s53 () Int (seq.len s51))
[GOOD] (define-fun s54 () Int (- s53 s20))
[GOOD] (define-fun s55 () (Seq Int) (seq.extract s51 s20 s54))
[GOOD] (define-fun s56 () Bool (= s18 s55))
[GOOD] (define-fun s58 () (Seq Int) (seq.unit s57))
[GOOD] (define-fun s59 () Int (seq.len s55))
[GOOD] (define-fun s60 () Bool (> s59 s7))
[GOOD] (define-fun s61 () Bool (not s60))
[GOOD] (define-fun s62 () (Seq Int) (seq.extract s55 s7 s20))
[GOOD] (define-fun s63 () Bool (= s58 s62))
[GOOD] (define-fun s64 () Bool (or s61 s63))
[GOOD] (define-fun s65 () Bool (< s57 s7))
[GOOD] (define-fun s67 () Bool (> s57 s66))
[GOOD] (define-fun s68 () Bool (or s65 s67))
[GOOD] (define-fun s69 () Bool (ite s56 s_2 s68))
[GOOD] (define-fun s71 () (Seq Int) (seq.unit s70))
[GOOD] (define-fun s72 () Bool (> s53 s7))
[GOOD] (define-fun s73 () Bool (not s72))
[GOOD] (define-fun s74 () (Seq Int) (seq.extract s51 s7 s20))
[GOOD] (define-fun s75 () Bool (= s71 s74))
[GOOD] (define-fun s76 () Bool (or s73 s75))
[GOOD] (define-fun s77 () Bool (< s70 s7))
[GOOD] (define-fun s78 () Bool (> s70 s66))
[GOOD] (define-fun s79 () Bool (or s77 s78))
[GOOD] (define-fun s80 () Bool (or s69 s79))
[GOOD] (define-fun s81 () Bool (ite s52 s_2 s80))
[GOOD] (define-fun s83 () (Seq Int) (seq.unit s82))
[GOOD] (define-fun s84 () Bool (> s49 s7))
[GOOD] (define-fun s85 () Bool (not s84))
[GOOD] (define-fun s86 () (Seq Int) (seq.extract s47 s7 s20))
[GOOD] (define-fun s87 () Bool (= s83 s86))
[GOOD] (define-fun s88 () Bool (or s85 s87))
[GOOD] (define-fun s89 () Bool (< s82 s7))
[GOOD] (define-fun s90 () Bool (> s82 s66))
[GOOD] (define-fun s91 () Bool (or s89 s90))
[GOOD] (define-fun s92 () Bool (or s81 s91))
[GOOD] (define-fun s93 () Bool (ite s48 s_2 s92))
[GOOD] (define-fun s95 () (Seq Int) (seq.unit s94))
[GOOD] (define-fun s96 () Bool (> s45 s7))
[GOOD] (define-fun s97 () Bool (not s96))
[GOOD] (define-fun s98 () (Seq Int) (seq.extract s43 s7 s20))
[GOOD] (define-fun s99 () Bool (= s95 s98))
[GOOD] (define-fun s100 () Bool (or s97 s99))
[GOOD] (define-fun s101 () Bool (< s94 s7))
[GOOD] (define-fun s102 () Bool (> s94 s66))
[GOOD] (define-fun s103 () Bool (or s101 s102))
[GOOD] (define-fun s104 () Bool (or s93 s103))
[GOOD] (define-fun s105 () Bool (ite s44 s_2 s104))
[GOOD] (define-fun s107 () (Seq Int) (seq.unit s106))
[GOOD] (define-fun s108 () Bool (> s41 s7))
[GOOD] (define-fun s109 () Bool (not s108))
[GOOD] (define-fun s110 () (Seq Int) (seq.extract s39 s7 s20))
[GOOD] (define-fun s111 () Bool (= s107 s110))
[GOOD] (define-fun s112 () Bool (or s109 s111))
[GOOD] (define-fun s113 () Bool (< s106 s7))
[GOOD] (define-fun s114 () Bool (> s106 s66))
[GOOD] (define-fun s115 () Bool (or s113 s114))
[GOOD] (define-fun s116 () Bool (or s105 s115))
[GOOD] (define-fun s117 () Bool (ite s40 s_2 s116))
[GOOD] (define-fun s119 () (Seq Int) (seq.unit s118))
[GOOD] (define-fun s120 () Bool (> s37 s7))
[GOOD] (define-fun s121 () Bool (not s120))
[GOOD] (define-fun s122 () (Seq Int) (seq.extract s35 s7 s20))
[GOOD] (define-fun s123 () Bool (= s119 s122))
[GOOD] (define-fun s124 () Bool (or s121 s123))
[GOOD] (define-fun s125 () Bool (< s118 s7))
[GOOD] (define-fun s126 () Bool (> s118 s66))
[GOOD] (define-fun s127 () Bool (or s125 s126))
[GOOD] (define-fun s128 () Bool (or s117 s127))
[GOOD] (define-fun s129 () Bool (ite s36 s_2 s128))
[GOOD] (define-fun s131 () (Seq Int) (seq.unit s130))
[GOOD] (define-fun s132 () Bool (> s33 s7))
[GOOD] (define-fun s133 () Bool (not s132))
[GOOD] (define-fun s134 () (Seq Int) (seq.extract s31 s7 s20))
[GOOD] (define-fun s135 () Bool (= s131 s134))
[GOOD] (define-fun s136 () Bool (or s133 s135))
[GOOD] (define-fun s137 () Bool (< s130 s7))
[GOOD] (define-fun s138 () Bool (> s130 s66))
[GOOD] (define-fun s139 () Bool (or s137 s138))
[GOOD] (define-fun s140 () Bool (or s129 s139))
[GOOD] (define-fun s141 () Bool (ite s32 s_2 s140))
[GOOD] (define-fun s143 () (Seq Int) (seq.unit s142))
[GOOD] (define-fun s144 () Bool (> s29 s7))
[GOOD] (define-fun s145 () Bool (not s144))
[GOOD] (define-fun s146 () (Seq Int) (seq.extract s27 s7 s20))
[GOOD] (define-fun s147 () Bool (= s143 s146))
[GOOD] (define-fun s148 () Bool (or s145 s147))
[GOOD] (define-fun s149 () Bool (< s142 s7))
[GOOD] (define-fun s150 () Bool (> s142 s66))
[GOOD] (define-fun s151 () Bool (or s149 s150))
[GOOD] (define-fun s152 () Bool (or s141 s151))
[GOOD] (define-fun s153 () Bool (ite s28 s_2 s152))
[GOOD] (define-fun s155 () (Seq Int) (seq.unit s154))
[GOOD] (define-fun s156 () Bool (> s25 s7))
[GOOD] (define-fun s157 () Bool (not s156))
[GOOD] (define-fun s158 () (Seq Int) (seq.extract s23 s7 s20))
[GOOD] (define-fun s159 () Bool (= s155 s158))
[GOOD] (define-fun s160 () Bool (or s157 s159))
[GOOD] (define-fun s161 () Bool (< s154 s7))
[GOOD] (define-fun s162 () Bool (> s154 s66))
[GOOD] (define-fun s163 () Bool (or s161 s162))
[GOOD] (define-fun s164 () Bool (or s153 s163))
[GOOD] (define-fun s165 () Bool (ite s24 s_2 s164))
[GOOD] (define-fun s167 () (Seq Int) (seq.unit s166))
[GOOD] (define-fun s168 () Bool (> s21 s7))
[GOOD] (define-fun s169 () Bool (not s168))
[GOOD] (define-fun s170 () (Seq Int) (seq.extract s17 s7 s20))
[GOOD] (define-fun s171 () Bool (= s167 s170))
[GOOD] (define-fun s172 () Bool (or s169 s171))
[GOOD] (define-fun s173 () Bool (< s166 s7))
[GOOD] (define-fun s174 () Bool (> s166 s66))
[GOOD] (define-fun s175 () Bool (or s173 s174))
[GOOD] (define-fun s176 () Bool (or s165 s175))
[GOOD] (define-fun s177 () Bool (ite s19 s_2 s176))
[GOOD] (assert s6)
[GOOD] (assert s12)
[GOOD] (assert s64)
[GOOD] (assert s76)
[GOOD] (assert s88)
[GOOD] (assert s100)
[GOOD] (assert s112)
[GOOD] (assert s124)
[GOOD] (assert s136)
[GOOD] (assert s148)
[GOOD] (assert s160)
[GOOD] (assert s172)
[GOOD] (assert s177)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
