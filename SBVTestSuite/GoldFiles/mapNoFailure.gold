** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-logic ALL)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s5 () Int 6)
[GOOD] (define-fun s7 () Int 0)
[GOOD] (define-fun s20 () Int 1)
[GOOD] (define-fun s66 () Int 10)
[GOOD] (define-fun s18 () (Seq Int) (as seq.empty (Seq Int)))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () Int) ; tracks user variable "a"
[GOOD] (declare-fun s1 () Int) ; tracks user variable "b"
[GOOD] (declare-fun s2 () Int) ; tracks user variable "c"
[GOOD] (declare-fun s57 () Int) ; tracks user variable "__internal_sbv_s57"
[GOOD] (declare-fun s71 () Int) ; tracks user variable "__internal_sbv_s71"
[GOOD] (declare-fun s84 () Int) ; tracks user variable "__internal_sbv_s84"
[GOOD] (declare-fun s97 () Int) ; tracks user variable "__internal_sbv_s97"
[GOOD] (declare-fun s110 () Int) ; tracks user variable "__internal_sbv_s110"
[GOOD] (declare-fun s123 () Int) ; tracks user variable "__internal_sbv_s123"
[GOOD] (declare-fun s136 () Int) ; tracks user variable "__internal_sbv_s136"
[GOOD] (declare-fun s149 () Int) ; tracks user variable "__internal_sbv_s149"
[GOOD] (declare-fun s162 () Int) ; tracks user variable "__internal_sbv_s162"
[GOOD] (declare-fun s175 () Int) ; tracks user variable "__internal_sbv_s175"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s3 () Int (+ s0 s1))
[GOOD] (define-fun s4 () Int (+ s2 s3))
[GOOD] (define-fun s6 () Bool (= s4 s5))
[GOOD] (define-fun s8 () Bool (> s0 s7))
[GOOD] (define-fun s9 () Bool (> s1 s7))
[GOOD] (define-fun s10 () Bool (> s2 s7))
[GOOD] (define-fun s11 () Bool (and s9 s10))
[GOOD] (define-fun s12 () Bool (and s8 s11))
[GOOD] (define-fun s13 () (Seq Int) (seq.unit s0))
[GOOD] (define-fun s14 () (Seq Int) (seq.unit s1))
[GOOD] (define-fun s15 () (Seq Int) (seq.unit s2))
[GOOD] (define-fun s16 () (Seq Int) (seq.++ s14 s15))
[GOOD] (define-fun s17 () (Seq Int) (seq.++ s13 s16))
[GOOD] (define-fun s19 () Bool (= s17 s18))
[GOOD] (define-fun s21 () Int (seq.len s17))
[GOOD] (define-fun s22 () Int (- s21 s20))
[GOOD] (define-fun s23 () (Seq Int) (seq.extract s17 s20 s22))
[GOOD] (define-fun s24 () Bool (= s18 s23))
[GOOD] (define-fun s25 () Int (seq.len s23))
[GOOD] (define-fun s26 () Int (- s25 s20))
[GOOD] (define-fun s27 () (Seq Int) (seq.extract s23 s20 s26))
[GOOD] (define-fun s28 () Bool (= s18 s27))
[GOOD] (define-fun s29 () Int (seq.len s27))
[GOOD] (define-fun s30 () Int (- s29 s20))
[GOOD] (define-fun s31 () (Seq Int) (seq.extract s27 s20 s30))
[GOOD] (define-fun s32 () Bool (= s18 s31))
[GOOD] (define-fun s33 () Int (seq.len s31))
[GOOD] (define-fun s34 () Int (- s33 s20))
[GOOD] (define-fun s35 () (Seq Int) (seq.extract s31 s20 s34))
[GOOD] (define-fun s36 () Bool (= s18 s35))
[GOOD] (define-fun s37 () Int (seq.len s35))
[GOOD] (define-fun s38 () Int (- s37 s20))
[GOOD] (define-fun s39 () (Seq Int) (seq.extract s35 s20 s38))
[GOOD] (define-fun s40 () Bool (= s18 s39))
[GOOD] (define-fun s41 () Int (seq.len s39))
[GOOD] (define-fun s42 () Int (- s41 s20))
[GOOD] (define-fun s43 () (Seq Int) (seq.extract s39 s20 s42))
[GOOD] (define-fun s44 () Bool (= s18 s43))
[GOOD] (define-fun s45 () Int (seq.len s43))
[GOOD] (define-fun s46 () Int (- s45 s20))
[GOOD] (define-fun s47 () (Seq Int) (seq.extract s43 s20 s46))
[GOOD] (define-fun s48 () Bool (= s18 s47))
[GOOD] (define-fun s49 () Int (seq.len s47))
[GOOD] (define-fun s50 () Int (- s49 s20))
[GOOD] (define-fun s51 () (Seq Int) (seq.extract s47 s20 s50))
[GOOD] (define-fun s52 () Bool (= s18 s51))
[GOOD] (define-fun s53 () Int (seq.len s51))
[GOOD] (define-fun s54 () Int (- s53 s20))
[GOOD] (define-fun s55 () (Seq Int) (seq.extract s51 s20 s54))
[GOOD] (define-fun s56 () Bool (= s18 s55))
[GOOD] (define-fun s58 () (Seq Int) (seq.unit s57))
[GOOD] (define-fun s59 () Int (seq.len s55))
[GOOD] (define-fun s60 () Bool (> s59 s7))
[GOOD] (define-fun s61 () Bool (not s60))
[GOOD] (define-fun s62 () (Seq Int) (seq.extract s55 s7 s20))
[GOOD] (define-fun s63 () Bool (= s58 s62))
[GOOD] (define-fun s64 () Bool (or s61 s63))
[GOOD] (define-fun s65 () Bool (< s57 s7))
[GOOD] (define-fun s67 () Bool (> s57 s66))
[GOOD] (define-fun s68 () Bool (or s65 s67))
[GOOD] (define-fun s69 () Bool (not s56))
[GOOD] (define-fun s70 () Bool (and s68 s69))
[GOOD] (define-fun s72 () (Seq Int) (seq.unit s71))
[GOOD] (define-fun s73 () Bool (> s53 s7))
[GOOD] (define-fun s74 () Bool (not s73))
[GOOD] (define-fun s75 () (Seq Int) (seq.extract s51 s7 s20))
[GOOD] (define-fun s76 () Bool (= s72 s75))
[GOOD] (define-fun s77 () Bool (or s74 s76))
[GOOD] (define-fun s78 () Bool (< s71 s7))
[GOOD] (define-fun s79 () Bool (> s71 s66))
[GOOD] (define-fun s80 () Bool (or s78 s79))
[GOOD] (define-fun s81 () Bool (or s70 s80))
[GOOD] (define-fun s82 () Bool (not s52))
[GOOD] (define-fun s83 () Bool (and s81 s82))
[GOOD] (define-fun s85 () (Seq Int) (seq.unit s84))
[GOOD] (define-fun s86 () Bool (> s49 s7))
[GOOD] (define-fun s87 () Bool (not s86))
[GOOD] (define-fun s88 () (Seq Int) (seq.extract s47 s7 s20))
[GOOD] (define-fun s89 () Bool (= s85 s88))
[GOOD] (define-fun s90 () Bool (or s87 s89))
[GOOD] (define-fun s91 () Bool (< s84 s7))
[GOOD] (define-fun s92 () Bool (> s84 s66))
[GOOD] (define-fun s93 () Bool (or s91 s92))
[GOOD] (define-fun s94 () Bool (or s83 s93))
[GOOD] (define-fun s95 () Bool (not s48))
[GOOD] (define-fun s96 () Bool (and s94 s95))
[GOOD] (define-fun s98 () (Seq Int) (seq.unit s97))
[GOOD] (define-fun s99 () Bool (> s45 s7))
[GOOD] (define-fun s100 () Bool (not s99))
[GOOD] (define-fun s101 () (Seq Int) (seq.extract s43 s7 s20))
[GOOD] (define-fun s102 () Bool (= s98 s101))
[GOOD] (define-fun s103 () Bool (or s100 s102))
[GOOD] (define-fun s104 () Bool (< s97 s7))
[GOOD] (define-fun s105 () Bool (> s97 s66))
[GOOD] (define-fun s106 () Bool (or s104 s105))
[GOOD] (define-fun s107 () Bool (or s96 s106))
[GOOD] (define-fun s108 () Bool (not s44))
[GOOD] (define-fun s109 () Bool (and s107 s108))
[GOOD] (define-fun s111 () (Seq Int) (seq.unit s110))
[GOOD] (define-fun s112 () Bool (> s41 s7))
[GOOD] (define-fun s113 () Bool (not s112))
[GOOD] (define-fun s114 () (Seq Int) (seq.extract s39 s7 s20))
[GOOD] (define-fun s115 () Bool (= s111 s114))
[GOOD] (define-fun s116 () Bool (or s113 s115))
[GOOD] (define-fun s117 () Bool (< s110 s7))
[GOOD] (define-fun s118 () Bool (> s110 s66))
[GOOD] (define-fun s119 () Bool (or s117 s118))
[GOOD] (define-fun s120 () Bool (or s109 s119))
[GOOD] (define-fun s121 () Bool (not s40))
[GOOD] (define-fun s122 () Bool (and s120 s121))
[GOOD] (define-fun s124 () (Seq Int) (seq.unit s123))
[GOOD] (define-fun s125 () Bool (> s37 s7))
[GOOD] (define-fun s126 () Bool (not s125))
[GOOD] (define-fun s127 () (Seq Int) (seq.extract s35 s7 s20))
[GOOD] (define-fun s128 () Bool (= s124 s127))
[GOOD] (define-fun s129 () Bool (or s126 s128))
[GOOD] (define-fun s130 () Bool (< s123 s7))
[GOOD] (define-fun s131 () Bool (> s123 s66))
[GOOD] (define-fun s132 () Bool (or s130 s131))
[GOOD] (define-fun s133 () Bool (or s122 s132))
[GOOD] (define-fun s134 () Bool (not s36))
[GOOD] (define-fun s135 () Bool (and s133 s134))
[GOOD] (define-fun s137 () (Seq Int) (seq.unit s136))
[GOOD] (define-fun s138 () Bool (> s33 s7))
[GOOD] (define-fun s139 () Bool (not s138))
[GOOD] (define-fun s140 () (Seq Int) (seq.extract s31 s7 s20))
[GOOD] (define-fun s141 () Bool (= s137 s140))
[GOOD] (define-fun s142 () Bool (or s139 s141))
[GOOD] (define-fun s143 () Bool (< s136 s7))
[GOOD] (define-fun s144 () Bool (> s136 s66))
[GOOD] (define-fun s145 () Bool (or s143 s144))
[GOOD] (define-fun s146 () Bool (or s135 s145))
[GOOD] (define-fun s147 () Bool (not s32))
[GOOD] (define-fun s148 () Bool (and s146 s147))
[GOOD] (define-fun s150 () (Seq Int) (seq.unit s149))
[GOOD] (define-fun s151 () Bool (> s29 s7))
[GOOD] (define-fun s152 () Bool (not s151))
[GOOD] (define-fun s153 () (Seq Int) (seq.extract s27 s7 s20))
[GOOD] (define-fun s154 () Bool (= s150 s153))
[GOOD] (define-fun s155 () Bool (or s152 s154))
[GOOD] (define-fun s156 () Bool (< s149 s7))
[GOOD] (define-fun s157 () Bool (> s149 s66))
[GOOD] (define-fun s158 () Bool (or s156 s157))
[GOOD] (define-fun s159 () Bool (or s148 s158))
[GOOD] (define-fun s160 () Bool (not s28))
[GOOD] (define-fun s161 () Bool (and s159 s160))
[GOOD] (define-fun s163 () (Seq Int) (seq.unit s162))
[GOOD] (define-fun s164 () Bool (> s25 s7))
[GOOD] (define-fun s165 () Bool (not s164))
[GOOD] (define-fun s166 () (Seq Int) (seq.extract s23 s7 s20))
[GOOD] (define-fun s167 () Bool (= s163 s166))
[GOOD] (define-fun s168 () Bool (or s165 s167))
[GOOD] (define-fun s169 () Bool (< s162 s7))
[GOOD] (define-fun s170 () Bool (> s162 s66))
[GOOD] (define-fun s171 () Bool (or s169 s170))
[GOOD] (define-fun s172 () Bool (or s161 s171))
[GOOD] (define-fun s173 () Bool (not s24))
[GOOD] (define-fun s174 () Bool (and s172 s173))
[GOOD] (define-fun s176 () (Seq Int) (seq.unit s175))
[GOOD] (define-fun s177 () Bool (> s21 s7))
[GOOD] (define-fun s178 () Bool (not s177))
[GOOD] (define-fun s179 () (Seq Int) (seq.extract s17 s7 s20))
[GOOD] (define-fun s180 () Bool (= s176 s179))
[GOOD] (define-fun s181 () Bool (or s178 s180))
[GOOD] (define-fun s182 () Bool (< s175 s7))
[GOOD] (define-fun s183 () Bool (> s175 s66))
[GOOD] (define-fun s184 () Bool (or s182 s183))
[GOOD] (define-fun s185 () Bool (or s174 s184))
[GOOD] (define-fun s186 () Bool (not s19))
[GOOD] (define-fun s187 () Bool (and s185 s186))
[GOOD] (assert s6)
[GOOD] (assert s12)
[GOOD] (assert s64)
[GOOD] (assert s77)
[GOOD] (assert s90)
[GOOD] (assert s103)
[GOOD] (assert s116)
[GOOD] (assert s129)
[GOOD] (assert s142)
[GOOD] (assert s155)
[GOOD] (assert s168)
[GOOD] (assert s181)
[GOOD] (assert s187)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
