** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-logic ALL)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] (declare-datatypes ((SBVEither 2)) ((par (T1 T2)
                                           ((left_SBVEither  (get_left_SBVEither  T1))
                                            (right_SBVEither (get_right_SBVEither T2))))))
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s2 () Int 2)
[GOOD] (define-fun s6 () Int 0)
[GOOD] (define-fun s7 () Int 1)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (Seq (SBVEither Int (_ BitVec 8)))) ; tracks user variable "lst"
[GOOD] (declare-fun s4 () (SBVEither Int (_ BitVec 8))) ; tracks user variable "__internal_sbv_s4"
[GOOD] (declare-fun s14 () (SBVEither Int (_ BitVec 8))) ; tracks user variable "__internal_sbv_s14"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s1 () Int (seq.len s0))
[GOOD] (define-fun s3 () Bool (= s1 s2))
[GOOD] (define-fun s5 () (Seq (SBVEither Int (_ BitVec 8))) (seq.unit s4))
[GOOD] (define-fun s8 () (Seq (SBVEither Int (_ BitVec 8))) (seq.extract s0 s6 s7))
[GOOD] (define-fun s9 () Bool (= s5 s8))
[GOOD] (define-fun s10 () Bool (<= s1 s6))
[GOOD] (define-fun s11 () Bool (or s9 s10))
[GOOD] (define-fun s12 () Bool ((_ is (left_SBVEither (Int) (SBVEither Int (_ BitVec 8)))) s4))
[GOOD] (define-fun s13 () Bool (ite s12 true false))
[GOOD] (define-fun s15 () (Seq (SBVEither Int (_ BitVec 8))) (seq.unit s14))
[GOOD] (define-fun s16 () Int (- s1 s7))
[GOOD] (define-fun s17 () (Seq (SBVEither Int (_ BitVec 8))) (seq.extract s0 s7 s16))
[GOOD] (define-fun s18 () (Seq (SBVEither Int (_ BitVec 8))) (seq.extract s17 s6 s7))
[GOOD] (define-fun s19 () Bool (= s15 s18))
[GOOD] (define-fun s20 () Int (seq.len s17))
[GOOD] (define-fun s21 () Bool (<= s20 s6))
[GOOD] (define-fun s22 () Bool (or s19 s21))
[GOOD] (define-fun s23 () Bool ((_ is (left_SBVEither (Int) (SBVEither Int (_ BitVec 8)))) s14))
[GOOD] (define-fun s24 () Bool (ite s23 false true))
[GOOD] (assert s3)
[GOOD] (assert s11)
[GOOD] (assert s13)
[GOOD] (assert s22)
[GOOD] (assert s24)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 (seq.++ (seq.unit (left_SBVEither 3)) (seq.unit (right_SBVEither #x00)))))
*** Solver   : Z3
*** Exit code: ExitSuccess

FINAL OUTPUT:
[Left 3,Right '\NUL']
