** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s13 () Int 0)
[GOOD] (define-fun s16 () Int 1)
[GOOD] (define-fun s15 () (Seq Int) (as seq.empty (Seq Int)))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () Int) ; tracks user variable "a"
[GOOD] (declare-fun s1 () Int) ; tracks user variable "b"
[GOOD] (declare-fun s2 () Int) ; tracks user variable "c"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s3 () Bool (<= s0 s1))
[GOOD] (define-fun s4 () Bool (<= s1 s2))
[GOOD] (define-fun s5 () Bool (and s3 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (Seq Int) (seq.unit s0))
[GOOD] (define-fun s8 () (Seq Int) (seq.unit s1))
[GOOD] (define-fun s9 () (Seq Int) (seq.unit s2))
[GOOD] (define-fun s10 () (Seq Int) (seq.++ s8 s9))
[GOOD] (define-fun s11 () (Seq Int) (seq.++ s7 s10))
[GOOD] (define-fun s12 () Int (seq.len s11))
[GOOD] (define-fun s14 () Bool (= s12 s13))
[GOOD] (define-fun s17 () Int (- s12 s16))
[GOOD] (define-fun s18 () (Seq Int) (seq.extract s11 s16 s17))
[GOOD] (define-fun s19 () Int (seq.len s18))
[GOOD] (define-fun s20 () Bool (= s13 s19))
[GOOD] (define-fun s21 () Int (- s19 s16))
[GOOD] (define-fun s22 () (Seq Int) (seq.extract s18 s16 s21))
[GOOD] (define-fun s23 () Int (seq.len s22))
[GOOD] (define-fun s24 () Bool (= s13 s23))
[GOOD] (define-fun s25 () Int (seq.nth s22 s13))
[GOOD] (define-fun s26 () (Seq Int) (seq.unit s25))
[GOOD] (define-fun s27 () (Seq Int) (ite s24 s15 s26))
[GOOD] (define-fun s28 () Int (seq.len s27))
[GOOD] (define-fun s29 () Bool (= s13 s28))
[GOOD] (define-fun s30 () Int (seq.nth s18 s13))
[GOOD] (define-fun s31 () (Seq Int) (seq.unit s30))
[GOOD] (define-fun s32 () Int (seq.nth s27 s13))
[GOOD] (define-fun s33 () Bool (< s30 s32))
[GOOD] (define-fun s34 () (Seq Int) (seq.unit s32))
[GOOD] (define-fun s35 () Int (- s28 s16))
[GOOD] (define-fun s36 () (Seq Int) (seq.extract s27 s16 s35))
[GOOD] (define-fun s37 () (Seq Int) (seq.++ s34 s36))
[GOOD] (define-fun s38 () (Seq Int) (seq.++ s31 s37))
[GOOD] (define-fun s39 () Int (seq.len s36))
[GOOD] (define-fun s40 () Bool (= s13 s39))
[GOOD] (define-fun s41 () Int (seq.nth s36 s13))
[GOOD] (define-fun s42 () Bool (< s30 s41))
[GOOD] (define-fun s43 () (Seq Int) (seq.unit s41))
[GOOD] (define-fun s44 () Int (- s39 s16))
[GOOD] (define-fun s45 () (Seq Int) (seq.extract s36 s16 s44))
[GOOD] (define-fun s46 () (Seq Int) (seq.++ s43 s45))
[GOOD] (define-fun s47 () (Seq Int) (seq.++ s31 s46))
[GOOD] (define-fun s48 () Int (seq.len s45))
[GOOD] (define-fun s49 () Bool (= s13 s48))
[GOOD] (define-fun s50 () Int (seq.nth s45 s13))
[GOOD] (define-fun s51 () Bool (< s30 s50))
[GOOD] (define-fun s52 () (Seq Int) (seq.unit s50))
[GOOD] (define-fun s53 () Int (- s48 s16))
[GOOD] (define-fun s54 () (Seq Int) (seq.extract s45 s16 s53))
[GOOD] (define-fun s55 () (Seq Int) (seq.++ s52 s54))
[GOOD] (define-fun s56 () (Seq Int) (seq.++ s31 s55))
[GOOD] (define-fun s57 () (Seq Int) (seq.++ s52 s31))
[GOOD] (define-fun s58 () (Seq Int) (ite s51 s56 s57))
[GOOD] (define-fun s59 () (Seq Int) (ite s49 s31 s58))
[GOOD] (define-fun s60 () (Seq Int) (seq.++ s43 s59))
[GOOD] (define-fun s61 () (Seq Int) (ite s42 s47 s60))
[GOOD] (define-fun s62 () (Seq Int) (ite s40 s31 s61))
[GOOD] (define-fun s63 () (Seq Int) (seq.++ s34 s62))
[GOOD] (define-fun s64 () (Seq Int) (ite s33 s38 s63))
[GOOD] (define-fun s65 () (Seq Int) (ite s29 s31 s64))
[GOOD] (define-fun s66 () (Seq Int) (ite s20 s15 s65))
[GOOD] (define-fun s67 () Int (seq.len s66))
[GOOD] (define-fun s68 () Bool (= s13 s67))
[GOOD] (define-fun s69 () Int (seq.nth s11 s13))
[GOOD] (define-fun s70 () (Seq Int) (seq.unit s69))
[GOOD] (define-fun s71 () Int (seq.nth s66 s13))
[GOOD] (define-fun s72 () Bool (< s69 s71))
[GOOD] (define-fun s73 () (Seq Int) (seq.unit s71))
[GOOD] (define-fun s74 () Int (- s67 s16))
[GOOD] (define-fun s75 () (Seq Int) (seq.extract s66 s16 s74))
[GOOD] (define-fun s76 () (Seq Int) (seq.++ s73 s75))
[GOOD] (define-fun s77 () (Seq Int) (seq.++ s70 s76))
[GOOD] (define-fun s78 () Int (seq.len s75))
[GOOD] (define-fun s79 () Bool (= s13 s78))
[GOOD] (define-fun s80 () Int (seq.nth s75 s13))
[GOOD] (define-fun s81 () Bool (< s69 s80))
[GOOD] (define-fun s82 () (Seq Int) (seq.unit s80))
[GOOD] (define-fun s83 () Int (- s78 s16))
[GOOD] (define-fun s84 () (Seq Int) (seq.extract s75 s16 s83))
[GOOD] (define-fun s85 () (Seq Int) (seq.++ s82 s84))
[GOOD] (define-fun s86 () (Seq Int) (seq.++ s70 s85))
[GOOD] (define-fun s87 () Int (seq.len s84))
[GOOD] (define-fun s88 () Bool (= s13 s87))
[GOOD] (define-fun s89 () Int (seq.nth s84 s13))
[GOOD] (define-fun s90 () Bool (< s69 s89))
[GOOD] (define-fun s91 () (Seq Int) (seq.unit s89))
[GOOD] (define-fun s92 () Int (- s87 s16))
[GOOD] (define-fun s93 () (Seq Int) (seq.extract s84 s16 s92))
[GOOD] (define-fun s94 () (Seq Int) (seq.++ s91 s93))
[GOOD] (define-fun s95 () (Seq Int) (seq.++ s70 s94))
[GOOD] (define-fun s96 () (Seq Int) (seq.++ s91 s70))
[GOOD] (define-fun s97 () (Seq Int) (ite s90 s95 s96))
[GOOD] (define-fun s98 () (Seq Int) (ite s88 s70 s97))
[GOOD] (define-fun s99 () (Seq Int) (seq.++ s82 s98))
[GOOD] (define-fun s100 () (Seq Int) (ite s81 s86 s99))
[GOOD] (define-fun s101 () (Seq Int) (ite s79 s70 s100))
[GOOD] (define-fun s102 () (Seq Int) (seq.++ s73 s101))
[GOOD] (define-fun s103 () (Seq Int) (ite s72 s77 s102))
[GOOD] (define-fun s104 () (Seq Int) (ite s68 s70 s103))
[GOOD] (define-fun s105 () (Seq Int) (ite s14 s15 s104))
[GOOD] (define-fun s106 () Bool (= s11 s105))
[GOOD] (define-fun s107 () Bool (or s6 s106))
[GOOD] (define-fun s108 () Bool (<= s0 s2))
[GOOD] (define-fun s109 () Bool (<= s2 s1))
[GOOD] (define-fun s110 () Bool (and s108 s109))
[GOOD] (define-fun s111 () Bool (not s110))
[GOOD] (define-fun s112 () (Seq Int) (seq.++ s9 s8))
[GOOD] (define-fun s113 () (Seq Int) (seq.++ s7 s112))
[GOOD] (define-fun s114 () Bool (= s105 s113))
[GOOD] (define-fun s115 () Bool (or s111 s114))
[GOOD] (define-fun s116 () Bool (<= s1 s0))
[GOOD] (define-fun s117 () Bool (and s108 s116))
[GOOD] (define-fun s118 () Bool (not s117))
[GOOD] (define-fun s119 () (Seq Int) (seq.++ s7 s9))
[GOOD] (define-fun s120 () (Seq Int) (seq.++ s8 s119))
[GOOD] (define-fun s121 () Bool (= s105 s120))
[GOOD] (define-fun s122 () Bool (or s118 s121))
[GOOD] (define-fun s123 () Bool (<= s2 s0))
[GOOD] (define-fun s124 () Bool (and s4 s123))
[GOOD] (define-fun s125 () Bool (not s124))
[GOOD] (define-fun s126 () (Seq Int) (seq.++ s9 s7))
[GOOD] (define-fun s127 () (Seq Int) (seq.++ s8 s126))
[GOOD] (define-fun s128 () Bool (= s105 s127))
[GOOD] (define-fun s129 () Bool (or s125 s128))
[GOOD] (define-fun s130 () Bool (and s3 s123))
[GOOD] (define-fun s131 () Bool (not s130))
[GOOD] (define-fun s132 () (Seq Int) (seq.++ s7 s8))
[GOOD] (define-fun s133 () (Seq Int) (seq.++ s9 s132))
[GOOD] (define-fun s134 () Bool (= s105 s133))
[GOOD] (define-fun s135 () Bool (or s131 s134))
[GOOD] (define-fun s136 () Bool (and s109 s116))
[GOOD] (define-fun s137 () Bool (not s136))
[GOOD] (define-fun s138 () (Seq Int) (seq.++ s8 s7))
[GOOD] (define-fun s139 () (Seq Int) (seq.++ s9 s138))
[GOOD] (define-fun s140 () Bool (= s105 s139))
[GOOD] (define-fun s141 () Bool (or s137 s140))
[GOOD] (assert s107)
[GOOD] (assert s115)
[GOOD] (assert s122)
[GOOD] (assert s129)
[GOOD] (assert s135)
[GOOD] (assert s141)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
