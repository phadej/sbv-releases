** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-logic ALL)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s13 () Int 0)
[GOOD] (define-fun s16 () Int 1)
[GOOD] (define-fun s15 () (Seq Int) (as seq.empty (Seq Int)))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () Int) ; tracks user variable "a"
[GOOD] (declare-fun s1 () Int) ; tracks user variable "b"
[GOOD] (declare-fun s2 () Int) ; tracks user variable "c"
[GOOD] (declare-fun s25 () Int) ; tracks user variable "__internal_sbv_s25"
[GOOD] (declare-fun s34 () Int) ; tracks user variable "__internal_sbv_s34"
[GOOD] (declare-fun s40 () Int) ; tracks user variable "__internal_sbv_s40"
[GOOD] (declare-fun s53 () Int) ; tracks user variable "__internal_sbv_s53"
[GOOD] (declare-fun s66 () Int) ; tracks user variable "__internal_sbv_s66"
[GOOD] (declare-fun s89 () Int) ; tracks user variable "__internal_sbv_s89"
[GOOD] (declare-fun s95 () Int) ; tracks user variable "__internal_sbv_s95"
[GOOD] (declare-fun s108 () Int) ; tracks user variable "__internal_sbv_s108"
[GOOD] (declare-fun s121 () Int) ; tracks user variable "__internal_sbv_s121"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s3 () Bool (<= s0 s1))
[GOOD] (define-fun s4 () Bool (<= s1 s2))
[GOOD] (define-fun s5 () Bool (and s3 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (Seq Int) (seq.unit s0))
[GOOD] (define-fun s8 () (Seq Int) (seq.unit s1))
[GOOD] (define-fun s9 () (Seq Int) (seq.unit s2))
[GOOD] (define-fun s10 () (Seq Int) (seq.++ s8 s9))
[GOOD] (define-fun s11 () (Seq Int) (seq.++ s7 s10))
[GOOD] (define-fun s12 () Int (seq.len s11))
[GOOD] (define-fun s14 () Bool (= s12 s13))
[GOOD] (define-fun s17 () Int (- s12 s16))
[GOOD] (define-fun s18 () (Seq Int) (seq.extract s11 s16 s17))
[GOOD] (define-fun s19 () Int (seq.len s18))
[GOOD] (define-fun s20 () Bool (= s13 s19))
[GOOD] (define-fun s21 () Int (- s19 s16))
[GOOD] (define-fun s22 () (Seq Int) (seq.extract s18 s16 s21))
[GOOD] (define-fun s23 () Int (seq.len s22))
[GOOD] (define-fun s24 () Bool (= s13 s23))
[GOOD] (define-fun s26 () (Seq Int) (seq.unit s25))
[GOOD] (define-fun s27 () (Seq Int) (seq.extract s22 s13 s16))
[GOOD] (define-fun s28 () Bool (= s26 s27))
[GOOD] (define-fun s29 () Bool (<= s23 s13))
[GOOD] (define-fun s30 () Bool (or s28 s29))
[GOOD] (define-fun s31 () (Seq Int) (ite s24 s15 s26))
[GOOD] (define-fun s32 () Int (seq.len s31))
[GOOD] (define-fun s33 () Bool (= s13 s32))
[GOOD] (define-fun s35 () (Seq Int) (seq.unit s34))
[GOOD] (define-fun s36 () (Seq Int) (seq.extract s18 s13 s16))
[GOOD] (define-fun s37 () Bool (= s35 s36))
[GOOD] (define-fun s38 () Bool (<= s19 s13))
[GOOD] (define-fun s39 () Bool (or s37 s38))
[GOOD] (define-fun s41 () (Seq Int) (seq.unit s40))
[GOOD] (define-fun s42 () (Seq Int) (seq.extract s31 s13 s16))
[GOOD] (define-fun s43 () Bool (= s41 s42))
[GOOD] (define-fun s44 () Bool (<= s32 s13))
[GOOD] (define-fun s45 () Bool (or s43 s44))
[GOOD] (define-fun s46 () Bool (< s34 s40))
[GOOD] (define-fun s47 () Int (- s32 s16))
[GOOD] (define-fun s48 () (Seq Int) (seq.extract s31 s16 s47))
[GOOD] (define-fun s49 () (Seq Int) (seq.++ s41 s48))
[GOOD] (define-fun s50 () (Seq Int) (seq.++ s35 s49))
[GOOD] (define-fun s51 () Int (seq.len s48))
[GOOD] (define-fun s52 () Bool (= s13 s51))
[GOOD] (define-fun s54 () (Seq Int) (seq.unit s53))
[GOOD] (define-fun s55 () (Seq Int) (seq.extract s48 s13 s16))
[GOOD] (define-fun s56 () Bool (= s54 s55))
[GOOD] (define-fun s57 () Bool (<= s51 s13))
[GOOD] (define-fun s58 () Bool (or s56 s57))
[GOOD] (define-fun s59 () Bool (< s34 s53))
[GOOD] (define-fun s60 () Int (- s51 s16))
[GOOD] (define-fun s61 () (Seq Int) (seq.extract s48 s16 s60))
[GOOD] (define-fun s62 () (Seq Int) (seq.++ s54 s61))
[GOOD] (define-fun s63 () (Seq Int) (seq.++ s35 s62))
[GOOD] (define-fun s64 () Int (seq.len s61))
[GOOD] (define-fun s65 () Bool (= s13 s64))
[GOOD] (define-fun s67 () (Seq Int) (seq.unit s66))
[GOOD] (define-fun s68 () (Seq Int) (seq.extract s61 s13 s16))
[GOOD] (define-fun s69 () Bool (= s67 s68))
[GOOD] (define-fun s70 () Bool (<= s64 s13))
[GOOD] (define-fun s71 () Bool (or s69 s70))
[GOOD] (define-fun s72 () Bool (< s34 s66))
[GOOD] (define-fun s73 () Int (- s64 s16))
[GOOD] (define-fun s74 () (Seq Int) (seq.extract s61 s16 s73))
[GOOD] (define-fun s75 () (Seq Int) (seq.++ s67 s74))
[GOOD] (define-fun s76 () (Seq Int) (seq.++ s35 s75))
[GOOD] (define-fun s77 () (Seq Int) (seq.++ s67 s35))
[GOOD] (define-fun s78 () (Seq Int) (ite s72 s76 s77))
[GOOD] (define-fun s79 () (Seq Int) (ite s65 s35 s78))
[GOOD] (define-fun s80 () (Seq Int) (seq.++ s54 s79))
[GOOD] (define-fun s81 () (Seq Int) (ite s59 s63 s80))
[GOOD] (define-fun s82 () (Seq Int) (ite s52 s35 s81))
[GOOD] (define-fun s83 () (Seq Int) (seq.++ s41 s82))
[GOOD] (define-fun s84 () (Seq Int) (ite s46 s50 s83))
[GOOD] (define-fun s85 () (Seq Int) (ite s33 s35 s84))
[GOOD] (define-fun s86 () (Seq Int) (ite s20 s15 s85))
[GOOD] (define-fun s87 () Int (seq.len s86))
[GOOD] (define-fun s88 () Bool (= s13 s87))
[GOOD] (define-fun s90 () (Seq Int) (seq.unit s89))
[GOOD] (define-fun s91 () (Seq Int) (seq.extract s11 s13 s16))
[GOOD] (define-fun s92 () Bool (= s90 s91))
[GOOD] (define-fun s93 () Bool (<= s12 s13))
[GOOD] (define-fun s94 () Bool (or s92 s93))
[GOOD] (define-fun s96 () (Seq Int) (seq.unit s95))
[GOOD] (define-fun s97 () (Seq Int) (seq.extract s86 s13 s16))
[GOOD] (define-fun s98 () Bool (= s96 s97))
[GOOD] (define-fun s99 () Bool (<= s87 s13))
[GOOD] (define-fun s100 () Bool (or s98 s99))
[GOOD] (define-fun s101 () Bool (< s89 s95))
[GOOD] (define-fun s102 () Int (- s87 s16))
[GOOD] (define-fun s103 () (Seq Int) (seq.extract s86 s16 s102))
[GOOD] (define-fun s104 () (Seq Int) (seq.++ s96 s103))
[GOOD] (define-fun s105 () (Seq Int) (seq.++ s90 s104))
[GOOD] (define-fun s106 () Int (seq.len s103))
[GOOD] (define-fun s107 () Bool (= s13 s106))
[GOOD] (define-fun s109 () (Seq Int) (seq.unit s108))
[GOOD] (define-fun s110 () (Seq Int) (seq.extract s103 s13 s16))
[GOOD] (define-fun s111 () Bool (= s109 s110))
[GOOD] (define-fun s112 () Bool (<= s106 s13))
[GOOD] (define-fun s113 () Bool (or s111 s112))
[GOOD] (define-fun s114 () Bool (< s89 s108))
[GOOD] (define-fun s115 () Int (- s106 s16))
[GOOD] (define-fun s116 () (Seq Int) (seq.extract s103 s16 s115))
[GOOD] (define-fun s117 () (Seq Int) (seq.++ s109 s116))
[GOOD] (define-fun s118 () (Seq Int) (seq.++ s90 s117))
[GOOD] (define-fun s119 () Int (seq.len s116))
[GOOD] (define-fun s120 () Bool (= s13 s119))
[GOOD] (define-fun s122 () (Seq Int) (seq.unit s121))
[GOOD] (define-fun s123 () (Seq Int) (seq.extract s116 s13 s16))
[GOOD] (define-fun s124 () Bool (= s122 s123))
[GOOD] (define-fun s125 () Bool (<= s119 s13))
[GOOD] (define-fun s126 () Bool (or s124 s125))
[GOOD] (define-fun s127 () Bool (< s89 s121))
[GOOD] (define-fun s128 () Int (- s119 s16))
[GOOD] (define-fun s129 () (Seq Int) (seq.extract s116 s16 s128))
[GOOD] (define-fun s130 () (Seq Int) (seq.++ s122 s129))
[GOOD] (define-fun s131 () (Seq Int) (seq.++ s90 s130))
[GOOD] (define-fun s132 () (Seq Int) (seq.++ s122 s90))
[GOOD] (define-fun s133 () (Seq Int) (ite s127 s131 s132))
[GOOD] (define-fun s134 () (Seq Int) (ite s120 s90 s133))
[GOOD] (define-fun s135 () (Seq Int) (seq.++ s109 s134))
[GOOD] (define-fun s136 () (Seq Int) (ite s114 s118 s135))
[GOOD] (define-fun s137 () (Seq Int) (ite s107 s90 s136))
[GOOD] (define-fun s138 () (Seq Int) (seq.++ s96 s137))
[GOOD] (define-fun s139 () (Seq Int) (ite s101 s105 s138))
[GOOD] (define-fun s140 () (Seq Int) (ite s88 s90 s139))
[GOOD] (define-fun s141 () (Seq Int) (ite s14 s15 s140))
[GOOD] (define-fun s142 () Bool (= s11 s141))
[GOOD] (define-fun s143 () Bool (or s6 s142))
[GOOD] (define-fun s144 () Bool (<= s0 s2))
[GOOD] (define-fun s145 () Bool (<= s2 s1))
[GOOD] (define-fun s146 () Bool (and s144 s145))
[GOOD] (define-fun s147 () Bool (not s146))
[GOOD] (define-fun s148 () (Seq Int) (seq.++ s9 s8))
[GOOD] (define-fun s149 () (Seq Int) (seq.++ s7 s148))
[GOOD] (define-fun s150 () Bool (= s141 s149))
[GOOD] (define-fun s151 () Bool (or s147 s150))
[GOOD] (define-fun s152 () Bool (<= s1 s0))
[GOOD] (define-fun s153 () Bool (and s144 s152))
[GOOD] (define-fun s154 () Bool (not s153))
[GOOD] (define-fun s155 () (Seq Int) (seq.++ s7 s9))
[GOOD] (define-fun s156 () (Seq Int) (seq.++ s8 s155))
[GOOD] (define-fun s157 () Bool (= s141 s156))
[GOOD] (define-fun s158 () Bool (or s154 s157))
[GOOD] (define-fun s159 () Bool (<= s2 s0))
[GOOD] (define-fun s160 () Bool (and s4 s159))
[GOOD] (define-fun s161 () Bool (not s160))
[GOOD] (define-fun s162 () (Seq Int) (seq.++ s9 s7))
[GOOD] (define-fun s163 () (Seq Int) (seq.++ s8 s162))
[GOOD] (define-fun s164 () Bool (= s141 s163))
[GOOD] (define-fun s165 () Bool (or s161 s164))
[GOOD] (define-fun s166 () Bool (and s3 s159))
[GOOD] (define-fun s167 () Bool (not s166))
[GOOD] (define-fun s168 () (Seq Int) (seq.++ s7 s8))
[GOOD] (define-fun s169 () (Seq Int) (seq.++ s9 s168))
[GOOD] (define-fun s170 () Bool (= s141 s169))
[GOOD] (define-fun s171 () Bool (or s167 s170))
[GOOD] (define-fun s172 () Bool (and s145 s152))
[GOOD] (define-fun s173 () Bool (not s172))
[GOOD] (define-fun s174 () (Seq Int) (seq.++ s8 s7))
[GOOD] (define-fun s175 () (Seq Int) (seq.++ s9 s174))
[GOOD] (define-fun s176 () Bool (= s141 s175))
[GOOD] (define-fun s177 () Bool (or s173 s176))
[GOOD] (assert s30)
[GOOD] (assert s39)
[GOOD] (assert s45)
[GOOD] (assert s58)
[GOOD] (assert s71)
[GOOD] (assert s94)
[GOOD] (assert s100)
[GOOD] (assert s113)
[GOOD] (assert s126)
[GOOD] (assert s143)
[GOOD] (assert s151)
[GOOD] (assert s158)
[GOOD] (assert s165)
[GOOD] (assert s171)
[GOOD] (assert s177)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
