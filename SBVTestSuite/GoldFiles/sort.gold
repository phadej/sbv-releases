** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-logic ALL)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s14 () Int 1)
[GOOD] (define-fun s26 () Int 0)
[GOOD] (define-fun s12 () (Seq Int) (as seq.empty (Seq Int)))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () Int) ; tracks user variable "a"
[GOOD] (declare-fun s1 () Int) ; tracks user variable "b"
[GOOD] (declare-fun s2 () Int) ; tracks user variable "c"
[GOOD] (declare-fun s23 () Int) ; tracks user variable "__internal_sbv_s23"
[GOOD] (declare-fun s34 () Int) ; tracks user variable "__internal_sbv_s34"
[GOOD] (declare-fun s41 () Int) ; tracks user variable "__internal_sbv_s41"
[GOOD] (declare-fun s55 () Int) ; tracks user variable "__internal_sbv_s55"
[GOOD] (declare-fun s69 () Int) ; tracks user variable "__internal_sbv_s69"
[GOOD] (declare-fun s93 () Int) ; tracks user variable "__internal_sbv_s93"
[GOOD] (declare-fun s100 () Int) ; tracks user variable "__internal_sbv_s100"
[GOOD] (declare-fun s114 () Int) ; tracks user variable "__internal_sbv_s114"
[GOOD] (declare-fun s128 () Int) ; tracks user variable "__internal_sbv_s128"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s3 () Bool (<= s0 s1))
[GOOD] (define-fun s4 () Bool (<= s1 s2))
[GOOD] (define-fun s5 () Bool (and s3 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (Seq Int) (seq.unit s0))
[GOOD] (define-fun s8 () (Seq Int) (seq.unit s1))
[GOOD] (define-fun s9 () (Seq Int) (seq.unit s2))
[GOOD] (define-fun s10 () (Seq Int) (seq.++ s8 s9))
[GOOD] (define-fun s11 () (Seq Int) (seq.++ s7 s10))
[GOOD] (define-fun s13 () Bool (= s11 s12))
[GOOD] (define-fun s15 () Int (seq.len s11))
[GOOD] (define-fun s16 () Int (- s15 s14))
[GOOD] (define-fun s17 () (Seq Int) (seq.extract s11 s14 s16))
[GOOD] (define-fun s18 () Bool (= s12 s17))
[GOOD] (define-fun s19 () Int (seq.len s17))
[GOOD] (define-fun s20 () Int (- s19 s14))
[GOOD] (define-fun s21 () (Seq Int) (seq.extract s17 s14 s20))
[GOOD] (define-fun s22 () Bool (= s12 s21))
[GOOD] (define-fun s24 () (Seq Int) (seq.unit s23))
[GOOD] (define-fun s25 () Int (seq.len s21))
[GOOD] (define-fun s27 () Bool (> s25 s26))
[GOOD] (define-fun s28 () Bool (not s27))
[GOOD] (define-fun s29 () (Seq Int) (seq.extract s21 s26 s14))
[GOOD] (define-fun s30 () Bool (= s24 s29))
[GOOD] (define-fun s31 () Bool (or s28 s30))
[GOOD] (define-fun s32 () (Seq Int) (ite s22 s12 s24))
[GOOD] (define-fun s33 () Bool (= s12 s32))
[GOOD] (define-fun s35 () (Seq Int) (seq.unit s34))
[GOOD] (define-fun s36 () Bool (> s19 s26))
[GOOD] (define-fun s37 () Bool (not s36))
[GOOD] (define-fun s38 () (Seq Int) (seq.extract s17 s26 s14))
[GOOD] (define-fun s39 () Bool (= s35 s38))
[GOOD] (define-fun s40 () Bool (or s37 s39))
[GOOD] (define-fun s42 () (Seq Int) (seq.unit s41))
[GOOD] (define-fun s43 () Int (seq.len s32))
[GOOD] (define-fun s44 () Bool (> s43 s26))
[GOOD] (define-fun s45 () Bool (not s44))
[GOOD] (define-fun s46 () (Seq Int) (seq.extract s32 s26 s14))
[GOOD] (define-fun s47 () Bool (= s42 s46))
[GOOD] (define-fun s48 () Bool (or s45 s47))
[GOOD] (define-fun s49 () Bool (< s34 s41))
[GOOD] (define-fun s50 () Int (- s43 s14))
[GOOD] (define-fun s51 () (Seq Int) (seq.extract s32 s14 s50))
[GOOD] (define-fun s52 () (Seq Int) (seq.++ s42 s51))
[GOOD] (define-fun s53 () (Seq Int) (seq.++ s35 s52))
[GOOD] (define-fun s54 () Bool (= s12 s51))
[GOOD] (define-fun s56 () (Seq Int) (seq.unit s55))
[GOOD] (define-fun s57 () Int (seq.len s51))
[GOOD] (define-fun s58 () Bool (> s57 s26))
[GOOD] (define-fun s59 () Bool (not s58))
[GOOD] (define-fun s60 () (Seq Int) (seq.extract s51 s26 s14))
[GOOD] (define-fun s61 () Bool (= s56 s60))
[GOOD] (define-fun s62 () Bool (or s59 s61))
[GOOD] (define-fun s63 () Bool (< s34 s55))
[GOOD] (define-fun s64 () Int (- s57 s14))
[GOOD] (define-fun s65 () (Seq Int) (seq.extract s51 s14 s64))
[GOOD] (define-fun s66 () (Seq Int) (seq.++ s56 s65))
[GOOD] (define-fun s67 () (Seq Int) (seq.++ s35 s66))
[GOOD] (define-fun s68 () Bool (= s12 s65))
[GOOD] (define-fun s70 () (Seq Int) (seq.unit s69))
[GOOD] (define-fun s71 () Int (seq.len s65))
[GOOD] (define-fun s72 () Bool (> s71 s26))
[GOOD] (define-fun s73 () Bool (not s72))
[GOOD] (define-fun s74 () (Seq Int) (seq.extract s65 s26 s14))
[GOOD] (define-fun s75 () Bool (= s70 s74))
[GOOD] (define-fun s76 () Bool (or s73 s75))
[GOOD] (define-fun s77 () Bool (< s34 s69))
[GOOD] (define-fun s78 () Int (- s71 s14))
[GOOD] (define-fun s79 () (Seq Int) (seq.extract s65 s14 s78))
[GOOD] (define-fun s80 () (Seq Int) (seq.++ s70 s79))
[GOOD] (define-fun s81 () (Seq Int) (seq.++ s35 s80))
[GOOD] (define-fun s82 () (Seq Int) (seq.++ s70 s35))
[GOOD] (define-fun s83 () (Seq Int) (ite s77 s81 s82))
[GOOD] (define-fun s84 () (Seq Int) (ite s68 s35 s83))
[GOOD] (define-fun s85 () (Seq Int) (seq.++ s56 s84))
[GOOD] (define-fun s86 () (Seq Int) (ite s63 s67 s85))
[GOOD] (define-fun s87 () (Seq Int) (ite s54 s35 s86))
[GOOD] (define-fun s88 () (Seq Int) (seq.++ s42 s87))
[GOOD] (define-fun s89 () (Seq Int) (ite s49 s53 s88))
[GOOD] (define-fun s90 () (Seq Int) (ite s33 s35 s89))
[GOOD] (define-fun s91 () (Seq Int) (ite s18 s12 s90))
[GOOD] (define-fun s92 () Bool (= s12 s91))
[GOOD] (define-fun s94 () (Seq Int) (seq.unit s93))
[GOOD] (define-fun s95 () Bool (> s15 s26))
[GOOD] (define-fun s96 () Bool (not s95))
[GOOD] (define-fun s97 () (Seq Int) (seq.extract s11 s26 s14))
[GOOD] (define-fun s98 () Bool (= s94 s97))
[GOOD] (define-fun s99 () Bool (or s96 s98))
[GOOD] (define-fun s101 () (Seq Int) (seq.unit s100))
[GOOD] (define-fun s102 () Int (seq.len s91))
[GOOD] (define-fun s103 () Bool (> s102 s26))
[GOOD] (define-fun s104 () Bool (not s103))
[GOOD] (define-fun s105 () (Seq Int) (seq.extract s91 s26 s14))
[GOOD] (define-fun s106 () Bool (= s101 s105))
[GOOD] (define-fun s107 () Bool (or s104 s106))
[GOOD] (define-fun s108 () Bool (< s93 s100))
[GOOD] (define-fun s109 () Int (- s102 s14))
[GOOD] (define-fun s110 () (Seq Int) (seq.extract s91 s14 s109))
[GOOD] (define-fun s111 () (Seq Int) (seq.++ s101 s110))
[GOOD] (define-fun s112 () (Seq Int) (seq.++ s94 s111))
[GOOD] (define-fun s113 () Bool (= s12 s110))
[GOOD] (define-fun s115 () (Seq Int) (seq.unit s114))
[GOOD] (define-fun s116 () Int (seq.len s110))
[GOOD] (define-fun s117 () Bool (> s116 s26))
[GOOD] (define-fun s118 () Bool (not s117))
[GOOD] (define-fun s119 () (Seq Int) (seq.extract s110 s26 s14))
[GOOD] (define-fun s120 () Bool (= s115 s119))
[GOOD] (define-fun s121 () Bool (or s118 s120))
[GOOD] (define-fun s122 () Bool (< s93 s114))
[GOOD] (define-fun s123 () Int (- s116 s14))
[GOOD] (define-fun s124 () (Seq Int) (seq.extract s110 s14 s123))
[GOOD] (define-fun s125 () (Seq Int) (seq.++ s115 s124))
[GOOD] (define-fun s126 () (Seq Int) (seq.++ s94 s125))
[GOOD] (define-fun s127 () Bool (= s12 s124))
[GOOD] (define-fun s129 () (Seq Int) (seq.unit s128))
[GOOD] (define-fun s130 () Int (seq.len s124))
[GOOD] (define-fun s131 () Bool (> s130 s26))
[GOOD] (define-fun s132 () Bool (not s131))
[GOOD] (define-fun s133 () (Seq Int) (seq.extract s124 s26 s14))
[GOOD] (define-fun s134 () Bool (= s129 s133))
[GOOD] (define-fun s135 () Bool (or s132 s134))
[GOOD] (define-fun s136 () Bool (< s93 s128))
[GOOD] (define-fun s137 () Int (- s130 s14))
[GOOD] (define-fun s138 () (Seq Int) (seq.extract s124 s14 s137))
[GOOD] (define-fun s139 () (Seq Int) (seq.++ s129 s138))
[GOOD] (define-fun s140 () (Seq Int) (seq.++ s94 s139))
[GOOD] (define-fun s141 () (Seq Int) (seq.++ s129 s94))
[GOOD] (define-fun s142 () (Seq Int) (ite s136 s140 s141))
[GOOD] (define-fun s143 () (Seq Int) (ite s127 s94 s142))
[GOOD] (define-fun s144 () (Seq Int) (seq.++ s115 s143))
[GOOD] (define-fun s145 () (Seq Int) (ite s122 s126 s144))
[GOOD] (define-fun s146 () (Seq Int) (ite s113 s94 s145))
[GOOD] (define-fun s147 () (Seq Int) (seq.++ s101 s146))
[GOOD] (define-fun s148 () (Seq Int) (ite s108 s112 s147))
[GOOD] (define-fun s149 () (Seq Int) (ite s92 s94 s148))
[GOOD] (define-fun s150 () (Seq Int) (ite s13 s12 s149))
[GOOD] (define-fun s151 () Bool (= s11 s150))
[GOOD] (define-fun s152 () Bool (or s6 s151))
[GOOD] (define-fun s153 () Bool (<= s0 s2))
[GOOD] (define-fun s154 () Bool (<= s2 s1))
[GOOD] (define-fun s155 () Bool (and s153 s154))
[GOOD] (define-fun s156 () Bool (not s155))
[GOOD] (define-fun s157 () (Seq Int) (seq.++ s9 s8))
[GOOD] (define-fun s158 () (Seq Int) (seq.++ s7 s157))
[GOOD] (define-fun s159 () Bool (= s150 s158))
[GOOD] (define-fun s160 () Bool (or s156 s159))
[GOOD] (define-fun s161 () Bool (<= s1 s0))
[GOOD] (define-fun s162 () Bool (and s153 s161))
[GOOD] (define-fun s163 () Bool (not s162))
[GOOD] (define-fun s164 () (Seq Int) (seq.++ s7 s9))
[GOOD] (define-fun s165 () (Seq Int) (seq.++ s8 s164))
[GOOD] (define-fun s166 () Bool (= s150 s165))
[GOOD] (define-fun s167 () Bool (or s163 s166))
[GOOD] (define-fun s168 () Bool (<= s2 s0))
[GOOD] (define-fun s169 () Bool (and s4 s168))
[GOOD] (define-fun s170 () Bool (not s169))
[GOOD] (define-fun s171 () (Seq Int) (seq.++ s9 s7))
[GOOD] (define-fun s172 () (Seq Int) (seq.++ s8 s171))
[GOOD] (define-fun s173 () Bool (= s150 s172))
[GOOD] (define-fun s174 () Bool (or s170 s173))
[GOOD] (define-fun s175 () Bool (and s3 s168))
[GOOD] (define-fun s176 () Bool (not s175))
[GOOD] (define-fun s177 () (Seq Int) (seq.++ s7 s8))
[GOOD] (define-fun s178 () (Seq Int) (seq.++ s9 s177))
[GOOD] (define-fun s179 () Bool (= s150 s178))
[GOOD] (define-fun s180 () Bool (or s176 s179))
[GOOD] (define-fun s181 () Bool (and s154 s161))
[GOOD] (define-fun s182 () Bool (not s181))
[GOOD] (define-fun s183 () (Seq Int) (seq.++ s8 s7))
[GOOD] (define-fun s184 () (Seq Int) (seq.++ s9 s183))
[GOOD] (define-fun s185 () Bool (= s150 s184))
[GOOD] (define-fun s186 () Bool (or s182 s185))
[GOOD] (assert s31)
[GOOD] (assert s40)
[GOOD] (assert s48)
[GOOD] (assert s62)
[GOOD] (assert s76)
[GOOD] (assert s99)
[GOOD] (assert s107)
[GOOD] (assert s121)
[GOOD] (assert s135)
[GOOD] (assert s152)
[GOOD] (assert s160)
[GOOD] (assert s167)
[GOOD] (assert s174)
[GOOD] (assert s180)
[GOOD] (assert s186)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
