** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-logic ALL)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] (declare-datatypes () ((E (A) (B) (C))))
[GOOD] (define-fun E_constrIndex ((x E)) Int
          (ite (= x A) 0 (ite (= x B) 1 2))
       )
[GOOD] ; --- tuples ---
[GOOD] (declare-datatypes ((SBVTuple2 2)) ((par (T1 T2)
                                           ((mkSBVTuple2 (proj_1_SBVTuple2 T1)
                                                         (proj_2_SBVTuple2 T2))))))
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s6 () Int 1)
[GOOD] (define-fun s17 () Int 3)
[GOOD] (define-fun s21 () Int 2)
[GOOD] (define-fun s32 () Int 6)
[GOOD] (define-fun s36 () Int 4)
[GOOD] (define-fun s28 () E C)
[GOOD] (define-fun s13 () (Seq Bool) (seq.unit true))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (Seq (SBVTuple2 E (Seq Bool)))) ; tracks user variable "v1"
[GOOD] (declare-fun s1 () Bool) ; tracks user variable "q"
[GOOD] (declare-fun s3 () (SBVTuple2 E (Seq Bool))) ; tracks user variable "__internal_sbv_s3"
[GOOD] (declare-fun s19 () (SBVTuple2 E (Seq Bool))) ; tracks user variable "__internal_sbv_s19"
[GOOD] (declare-fun s34 () Bool) ; tracks user variable "__internal_sbv_s34"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (not s1))
[GOOD] (define-fun s4 () (Seq (SBVTuple2 E (Seq Bool))) (seq.unit s3))
[GOOD] (define-fun s5 () Int (seq.len s0))
[GOOD] (define-fun s7 () Bool (> s5 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (Seq (SBVTuple2 E (Seq Bool))) (seq.extract s0 s6 s6))
[GOOD] (define-fun s10 () Bool (= s4 s9))
[GOOD] (define-fun s11 () Bool (or s8 s10))
[GOOD] (define-fun s12 () (Seq Bool) (proj_2_SBVTuple2 s3))
[GOOD] (define-fun s14 () (Seq Bool) (seq.unit s1))
[GOOD] (define-fun s15 () (Seq Bool) (seq.++ s13 s14))
[GOOD] (define-fun s16 () Bool (= s12 s15))
[GOOD] (define-fun s18 () Bool (= s5 s17))
[GOOD] (define-fun s20 () (Seq (SBVTuple2 E (Seq Bool))) (seq.unit s19))
[GOOD] (define-fun s22 () Bool (> s5 s21))
[GOOD] (define-fun s23 () Bool (not s22))
[GOOD] (define-fun s24 () (Seq (SBVTuple2 E (Seq Bool))) (seq.extract s0 s21 s6))
[GOOD] (define-fun s25 () Bool (= s20 s24))
[GOOD] (define-fun s26 () Bool (or s23 s25))
[GOOD] (define-fun s27 () E (proj_1_SBVTuple2 s19))
[GOOD] (define-fun s29 () Bool (= s27 s28))
[GOOD] (define-fun s30 () (Seq Bool) (proj_2_SBVTuple2 s19))
[GOOD] (define-fun s31 () Int (seq.len s30))
[GOOD] (define-fun s33 () Bool (= s31 s32))
[GOOD] (define-fun s35 () (Seq Bool) (seq.unit s34))
[GOOD] (define-fun s37 () Bool (> s31 s36))
[GOOD] (define-fun s38 () Bool (not s37))
[GOOD] (define-fun s39 () (Seq Bool) (seq.extract s30 s36 s6))
[GOOD] (define-fun s40 () Bool (= s35 s39))
[GOOD] (define-fun s41 () Bool (or s38 s40))
[GOOD] (assert s2)
[GOOD] (assert s11)
[GOOD] (assert s16)
[GOOD] (assert s18)
[GOOD] (assert s26)
[GOOD] (assert s29)
[GOOD] (assert s33)
[GOOD] (assert s41)
[GOOD] (assert s34)
[GOOD] (declare-datatypes ((SBVTuple3 3)) ((par (T1 T2 T3)
                                           ((mkSBVTuple3 (proj_1_SBVTuple3 T1)
                                                         (proj_2_SBVTuple3 T2)
                                                         (proj_3_SBVTuple3 T3))))))
[GOOD] (declare-fun s42 () (SBVTuple2 (_ BitVec 8) (SBVTuple3 E (_ BitVec 8) (_ FloatingPoint  8 24))))
[GOOD] (define-fun s43 () (SBVTuple2 (_ BitVec 8) (SBVTuple3 E (_ BitVec 8) (_ FloatingPoint  8 24))) (mkSBVTuple2 #x05 (mkSBVTuple3 C #x41 ((_ to_fp 8 24) roundNearestTiesToEven (/ 8514437.0 1048576.0)))))
[GOOD] (define-fun s44 () Bool (= s42 s43))
[GOOD] (assert s44)
[GOOD] (define-fun s45 () (Seq (SBVTuple2 E (Seq Bool))) (seq.++ (seq.unit (mkSBVTuple2 B (as seq.empty (Seq Bool)))) (seq.unit (mkSBVTuple2 A (seq.++ (seq.unit true) (seq.unit false)))) (seq.unit (mkSBVTuple2 C (seq.++ (seq.unit false) (seq.unit false) (seq.unit false) (seq.unit false) (seq.unit true) (seq.unit false))))))
[GOOD] (define-fun s46 () Bool (= s0 s45))
[GOOD] (assert s46)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 (seq.++ (seq.unit (mkSBVTuple2 B (as seq.empty (Seq Bool))))
               (seq.++ (seq.unit (mkSBVTuple2 A
                                              (seq.++ (seq.unit true) (seq.unit false))))
                       (seq.unit (mkSBVTuple2 C
                                              (seq.++ (seq.unit false)
                                                      (seq.++ (seq.unit false)
                                                              (seq.++ (seq.unit false)
                                                                      (seq.++ (seq.unit false)
                                                                              (seq.++ (seq.unit true)
                                                                                      (seq.unit false))))))))))))
[SEND] (get-value (s42))
[RECV] ((s42 (mkSBVTuple2 #x05 (mkSBVTuple3 C #x41 (fp #b0 #x82 #b00000011110101110000101)))))
*** Solver   : Z3
*** Exit code: ExitSuccess

 FINAL: ([(B,[]),(A,[True,False]),(C,[False,False,False,False,True,False])],(5,(C,'A',8.12)))
DONE!
