** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-logic ALL) ; has unbounded values, using catch-all.
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s2 () Int 0)
[GOOD] (define-fun s6 () Int 1)
[GOOD] (define-fun s91 () Int 2)
[GOOD] (define-fun s93 () Int 11)
[GOOD] (define-fun s97 () Int 10)
[GOOD] (define-fun s4 () (Seq Int) (as seq.empty (Seq Int)))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (Seq Int)) ; tracks user variable "ints"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s1 () Int (seq.len s0))
[GOOD] (define-fun s3 () Bool (= s1 s2))
[GOOD] (define-fun s5 () Int (seq.nth s0 s2))
[GOOD] (define-fun s7 () Int (+ s5 s6))
[GOOD] (define-fun s8 () (Seq Int) (seq.unit s7))
[GOOD] (define-fun s9 () Int (- s1 s6))
[GOOD] (define-fun s10 () (Seq Int) (seq.extract s0 s6 s9))
[GOOD] (define-fun s11 () Int (seq.len s10))
[GOOD] (define-fun s12 () Bool (= s2 s11))
[GOOD] (define-fun s13 () Int (seq.nth s10 s2))
[GOOD] (define-fun s14 () Int (+ s6 s13))
[GOOD] (define-fun s15 () (Seq Int) (seq.unit s14))
[GOOD] (define-fun s16 () Int (- s11 s6))
[GOOD] (define-fun s17 () (Seq Int) (seq.extract s10 s6 s16))
[GOOD] (define-fun s18 () Int (seq.len s17))
[GOOD] (define-fun s19 () Bool (= s2 s18))
[GOOD] (define-fun s20 () Int (seq.nth s17 s2))
[GOOD] (define-fun s21 () Int (+ s6 s20))
[GOOD] (define-fun s22 () (Seq Int) (seq.unit s21))
[GOOD] (define-fun s23 () Int (- s18 s6))
[GOOD] (define-fun s24 () (Seq Int) (seq.extract s17 s6 s23))
[GOOD] (define-fun s25 () Int (seq.len s24))
[GOOD] (define-fun s26 () Bool (= s2 s25))
[GOOD] (define-fun s27 () Int (seq.nth s24 s2))
[GOOD] (define-fun s28 () Int (+ s6 s27))
[GOOD] (define-fun s29 () (Seq Int) (seq.unit s28))
[GOOD] (define-fun s30 () Int (- s25 s6))
[GOOD] (define-fun s31 () (Seq Int) (seq.extract s24 s6 s30))
[GOOD] (define-fun s32 () Int (seq.len s31))
[GOOD] (define-fun s33 () Bool (= s2 s32))
[GOOD] (define-fun s34 () Int (seq.nth s31 s2))
[GOOD] (define-fun s35 () Int (+ s6 s34))
[GOOD] (define-fun s36 () (Seq Int) (seq.unit s35))
[GOOD] (define-fun s37 () Int (- s32 s6))
[GOOD] (define-fun s38 () (Seq Int) (seq.extract s31 s6 s37))
[GOOD] (define-fun s39 () Int (seq.len s38))
[GOOD] (define-fun s40 () Bool (= s2 s39))
[GOOD] (define-fun s41 () Int (seq.nth s38 s2))
[GOOD] (define-fun s42 () Int (+ s6 s41))
[GOOD] (define-fun s43 () (Seq Int) (seq.unit s42))
[GOOD] (define-fun s44 () Int (- s39 s6))
[GOOD] (define-fun s45 () (Seq Int) (seq.extract s38 s6 s44))
[GOOD] (define-fun s46 () Int (seq.len s45))
[GOOD] (define-fun s47 () Bool (= s2 s46))
[GOOD] (define-fun s48 () Int (seq.nth s45 s2))
[GOOD] (define-fun s49 () Int (+ s6 s48))
[GOOD] (define-fun s50 () (Seq Int) (seq.unit s49))
[GOOD] (define-fun s51 () Int (- s46 s6))
[GOOD] (define-fun s52 () (Seq Int) (seq.extract s45 s6 s51))
[GOOD] (define-fun s53 () Int (seq.len s52))
[GOOD] (define-fun s54 () Bool (= s2 s53))
[GOOD] (define-fun s55 () Int (seq.nth s52 s2))
[GOOD] (define-fun s56 () Int (+ s6 s55))
[GOOD] (define-fun s57 () (Seq Int) (seq.unit s56))
[GOOD] (define-fun s58 () Int (- s53 s6))
[GOOD] (define-fun s59 () (Seq Int) (seq.extract s52 s6 s58))
[GOOD] (define-fun s60 () Int (seq.len s59))
[GOOD] (define-fun s61 () Bool (= s2 s60))
[GOOD] (define-fun s62 () Int (seq.nth s59 s2))
[GOOD] (define-fun s63 () Int (+ s6 s62))
[GOOD] (define-fun s64 () (Seq Int) (seq.unit s63))
[GOOD] (define-fun s65 () Int (- s60 s6))
[GOOD] (define-fun s66 () (Seq Int) (seq.extract s59 s6 s65))
[GOOD] (define-fun s67 () Int (seq.len s66))
[GOOD] (define-fun s68 () Bool (= s2 s67))
[GOOD] (define-fun s69 () Int (seq.nth s66 s2))
[GOOD] (define-fun s70 () Int (+ s6 s69))
[GOOD] (define-fun s71 () (Seq Int) (seq.unit s70))
[GOOD] (define-fun s72 () (Seq Int) (ite s68 s4 s71))
[GOOD] (define-fun s73 () (Seq Int) (seq.++ s64 s72))
[GOOD] (define-fun s74 () (Seq Int) (ite s61 s4 s73))
[GOOD] (define-fun s75 () (Seq Int) (seq.++ s57 s74))
[GOOD] (define-fun s76 () (Seq Int) (ite s54 s4 s75))
[GOOD] (define-fun s77 () (Seq Int) (seq.++ s50 s76))
[GOOD] (define-fun s78 () (Seq Int) (ite s47 s4 s77))
[GOOD] (define-fun s79 () (Seq Int) (seq.++ s43 s78))
[GOOD] (define-fun s80 () (Seq Int) (ite s40 s4 s79))
[GOOD] (define-fun s81 () (Seq Int) (seq.++ s36 s80))
[GOOD] (define-fun s82 () (Seq Int) (ite s33 s4 s81))
[GOOD] (define-fun s83 () (Seq Int) (seq.++ s29 s82))
[GOOD] (define-fun s84 () (Seq Int) (ite s26 s4 s83))
[GOOD] (define-fun s85 () (Seq Int) (seq.++ s22 s84))
[GOOD] (define-fun s86 () (Seq Int) (ite s19 s4 s85))
[GOOD] (define-fun s87 () (Seq Int) (seq.++ s15 s86))
[GOOD] (define-fun s88 () (Seq Int) (ite s12 s4 s87))
[GOOD] (define-fun s89 () (Seq Int) (seq.++ s8 s88))
[GOOD] (define-fun s90 () (Seq Int) (ite s3 s4 s89))
[GOOD] (define-fun s92 () Int (seq.nth s90 s91))
[GOOD] (define-fun s94 () Bool (> s92 s93))
[GOOD] (define-fun s95 () Bool (not s94))
[GOOD] (define-fun s96 () Bool (< s69 s2))
[GOOD] (define-fun s98 () Bool (> s69 s97))
[GOOD] (define-fun s99 () Bool (or s96 s98))
[GOOD] (define-fun s100 () Bool (not s68))
[GOOD] (define-fun s101 () Bool (and s99 s100))
[GOOD] (define-fun s102 () Bool (< s62 s2))
[GOOD] (define-fun s103 () Bool (> s62 s97))
[GOOD] (define-fun s104 () Bool (or s102 s103))
[GOOD] (define-fun s105 () Bool (or s101 s104))
[GOOD] (define-fun s106 () Bool (not s61))
[GOOD] (define-fun s107 () Bool (and s105 s106))
[GOOD] (define-fun s108 () Bool (< s55 s2))
[GOOD] (define-fun s109 () Bool (> s55 s97))
[GOOD] (define-fun s110 () Bool (or s108 s109))
[GOOD] (define-fun s111 () Bool (or s107 s110))
[GOOD] (define-fun s112 () Bool (not s54))
[GOOD] (define-fun s113 () Bool (and s111 s112))
[GOOD] (define-fun s114 () Bool (< s48 s2))
[GOOD] (define-fun s115 () Bool (> s48 s97))
[GOOD] (define-fun s116 () Bool (or s114 s115))
[GOOD] (define-fun s117 () Bool (or s113 s116))
[GOOD] (define-fun s118 () Bool (not s47))
[GOOD] (define-fun s119 () Bool (and s117 s118))
[GOOD] (define-fun s120 () Bool (< s41 s2))
[GOOD] (define-fun s121 () Bool (> s41 s97))
[GOOD] (define-fun s122 () Bool (or s120 s121))
[GOOD] (define-fun s123 () Bool (or s119 s122))
[GOOD] (define-fun s124 () Bool (not s40))
[GOOD] (define-fun s125 () Bool (and s123 s124))
[GOOD] (define-fun s126 () Bool (< s34 s2))
[GOOD] (define-fun s127 () Bool (> s34 s97))
[GOOD] (define-fun s128 () Bool (or s126 s127))
[GOOD] (define-fun s129 () Bool (or s125 s128))
[GOOD] (define-fun s130 () Bool (not s33))
[GOOD] (define-fun s131 () Bool (and s129 s130))
[GOOD] (define-fun s132 () Bool (< s27 s2))
[GOOD] (define-fun s133 () Bool (> s27 s97))
[GOOD] (define-fun s134 () Bool (or s132 s133))
[GOOD] (define-fun s135 () Bool (or s131 s134))
[GOOD] (define-fun s136 () Bool (not s26))
[GOOD] (define-fun s137 () Bool (and s135 s136))
[GOOD] (define-fun s138 () Bool (< s20 s2))
[GOOD] (define-fun s139 () Bool (> s20 s97))
[GOOD] (define-fun s140 () Bool (or s138 s139))
[GOOD] (define-fun s141 () Bool (or s137 s140))
[GOOD] (define-fun s142 () Bool (not s19))
[GOOD] (define-fun s143 () Bool (and s141 s142))
[GOOD] (define-fun s144 () Bool (< s13 s2))
[GOOD] (define-fun s145 () Bool (> s13 s97))
[GOOD] (define-fun s146 () Bool (or s144 s145))
[GOOD] (define-fun s147 () Bool (or s143 s146))
[GOOD] (define-fun s148 () Bool (not s12))
[GOOD] (define-fun s149 () Bool (and s147 s148))
[GOOD] (define-fun s150 () Bool (< s5 s2))
[GOOD] (define-fun s151 () Bool (> s5 s97))
[GOOD] (define-fun s152 () Bool (or s150 s151))
[GOOD] (define-fun s153 () Bool (or s149 s152))
[GOOD] (define-fun s154 () Bool (not s3))
[GOOD] (define-fun s155 () Bool (and s153 s154))
[GOOD] (define-fun s156 () Bool (or s95 s155))
[GOOD] (assert s156)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
