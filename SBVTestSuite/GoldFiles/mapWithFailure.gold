** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-logic ALL)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- sums ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s4 () Int 0)
[GOOD] (define-fun s9 () Int 1)
[GOOD] (define-fun s143 () Int 2)
[GOOD] (define-fun s149 () Int 11)
[GOOD] (define-fun s153 () Int 10)
[GOOD] (define-fun s6 () (Seq Int) (as seq.empty (Seq Int)))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (Seq Int)) ; tracks user variable "ints"
[GOOD] (declare-fun s1 () Int) ; tracks user variable "__internal_sbv_s1"
[GOOD] (declare-fun s7 () Int) ; tracks user variable "__internal_sbv_s7"
[GOOD] (declare-fun s20 () Int) ; tracks user variable "__internal_sbv_s20"
[GOOD] (declare-fun s32 () Int) ; tracks user variable "__internal_sbv_s32"
[GOOD] (declare-fun s44 () Int) ; tracks user variable "__internal_sbv_s44"
[GOOD] (declare-fun s56 () Int) ; tracks user variable "__internal_sbv_s56"
[GOOD] (declare-fun s68 () Int) ; tracks user variable "__internal_sbv_s68"
[GOOD] (declare-fun s80 () Int) ; tracks user variable "__internal_sbv_s80"
[GOOD] (declare-fun s92 () Int) ; tracks user variable "__internal_sbv_s92"
[GOOD] (declare-fun s104 () Int) ; tracks user variable "__internal_sbv_s104"
[GOOD] (declare-fun s116 () Int) ; tracks user variable "__internal_sbv_s116"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (Seq Int) (seq.unit s1))
[GOOD] (define-fun s3 () Int (seq.len s0))
[GOOD] (define-fun s5 () Bool (= s3 s4))
[GOOD] (define-fun s8 () (Seq Int) (seq.unit s7))
[GOOD] (define-fun s10 () (Seq Int) (seq.extract s0 s4 s9))
[GOOD] (define-fun s11 () Bool (= s8 s10))
[GOOD] (define-fun s12 () Bool (<= s3 s4))
[GOOD] (define-fun s13 () Bool (or s11 s12))
[GOOD] (define-fun s14 () Int (+ s7 s9))
[GOOD] (define-fun s15 () (Seq Int) (seq.unit s14))
[GOOD] (define-fun s16 () Int (- s3 s9))
[GOOD] (define-fun s17 () (Seq Int) (seq.extract s0 s9 s16))
[GOOD] (define-fun s18 () Int (seq.len s17))
[GOOD] (define-fun s19 () Bool (= s4 s18))
[GOOD] (define-fun s21 () (Seq Int) (seq.unit s20))
[GOOD] (define-fun s22 () (Seq Int) (seq.extract s17 s4 s9))
[GOOD] (define-fun s23 () Bool (= s21 s22))
[GOOD] (define-fun s24 () Bool (<= s18 s4))
[GOOD] (define-fun s25 () Bool (or s23 s24))
[GOOD] (define-fun s26 () Int (+ s9 s20))
[GOOD] (define-fun s27 () (Seq Int) (seq.unit s26))
[GOOD] (define-fun s28 () Int (- s18 s9))
[GOOD] (define-fun s29 () (Seq Int) (seq.extract s17 s9 s28))
[GOOD] (define-fun s30 () Int (seq.len s29))
[GOOD] (define-fun s31 () Bool (= s4 s30))
[GOOD] (define-fun s33 () (Seq Int) (seq.unit s32))
[GOOD] (define-fun s34 () (Seq Int) (seq.extract s29 s4 s9))
[GOOD] (define-fun s35 () Bool (= s33 s34))
[GOOD] (define-fun s36 () Bool (<= s30 s4))
[GOOD] (define-fun s37 () Bool (or s35 s36))
[GOOD] (define-fun s38 () Int (+ s9 s32))
[GOOD] (define-fun s39 () (Seq Int) (seq.unit s38))
[GOOD] (define-fun s40 () Int (- s30 s9))
[GOOD] (define-fun s41 () (Seq Int) (seq.extract s29 s9 s40))
[GOOD] (define-fun s42 () Int (seq.len s41))
[GOOD] (define-fun s43 () Bool (= s4 s42))
[GOOD] (define-fun s45 () (Seq Int) (seq.unit s44))
[GOOD] (define-fun s46 () (Seq Int) (seq.extract s41 s4 s9))
[GOOD] (define-fun s47 () Bool (= s45 s46))
[GOOD] (define-fun s48 () Bool (<= s42 s4))
[GOOD] (define-fun s49 () Bool (or s47 s48))
[GOOD] (define-fun s50 () Int (+ s9 s44))
[GOOD] (define-fun s51 () (Seq Int) (seq.unit s50))
[GOOD] (define-fun s52 () Int (- s42 s9))
[GOOD] (define-fun s53 () (Seq Int) (seq.extract s41 s9 s52))
[GOOD] (define-fun s54 () Int (seq.len s53))
[GOOD] (define-fun s55 () Bool (= s4 s54))
[GOOD] (define-fun s57 () (Seq Int) (seq.unit s56))
[GOOD] (define-fun s58 () (Seq Int) (seq.extract s53 s4 s9))
[GOOD] (define-fun s59 () Bool (= s57 s58))
[GOOD] (define-fun s60 () Bool (<= s54 s4))
[GOOD] (define-fun s61 () Bool (or s59 s60))
[GOOD] (define-fun s62 () Int (+ s9 s56))
[GOOD] (define-fun s63 () (Seq Int) (seq.unit s62))
[GOOD] (define-fun s64 () Int (- s54 s9))
[GOOD] (define-fun s65 () (Seq Int) (seq.extract s53 s9 s64))
[GOOD] (define-fun s66 () Int (seq.len s65))
[GOOD] (define-fun s67 () Bool (= s4 s66))
[GOOD] (define-fun s69 () (Seq Int) (seq.unit s68))
[GOOD] (define-fun s70 () (Seq Int) (seq.extract s65 s4 s9))
[GOOD] (define-fun s71 () Bool (= s69 s70))
[GOOD] (define-fun s72 () Bool (<= s66 s4))
[GOOD] (define-fun s73 () Bool (or s71 s72))
[GOOD] (define-fun s74 () Int (+ s9 s68))
[GOOD] (define-fun s75 () (Seq Int) (seq.unit s74))
[GOOD] (define-fun s76 () Int (- s66 s9))
[GOOD] (define-fun s77 () (Seq Int) (seq.extract s65 s9 s76))
[GOOD] (define-fun s78 () Int (seq.len s77))
[GOOD] (define-fun s79 () Bool (= s4 s78))
[GOOD] (define-fun s81 () (Seq Int) (seq.unit s80))
[GOOD] (define-fun s82 () (Seq Int) (seq.extract s77 s4 s9))
[GOOD] (define-fun s83 () Bool (= s81 s82))
[GOOD] (define-fun s84 () Bool (<= s78 s4))
[GOOD] (define-fun s85 () Bool (or s83 s84))
[GOOD] (define-fun s86 () Int (+ s9 s80))
[GOOD] (define-fun s87 () (Seq Int) (seq.unit s86))
[GOOD] (define-fun s88 () Int (- s78 s9))
[GOOD] (define-fun s89 () (Seq Int) (seq.extract s77 s9 s88))
[GOOD] (define-fun s90 () Int (seq.len s89))
[GOOD] (define-fun s91 () Bool (= s4 s90))
[GOOD] (define-fun s93 () (Seq Int) (seq.unit s92))
[GOOD] (define-fun s94 () (Seq Int) (seq.extract s89 s4 s9))
[GOOD] (define-fun s95 () Bool (= s93 s94))
[GOOD] (define-fun s96 () Bool (<= s90 s4))
[GOOD] (define-fun s97 () Bool (or s95 s96))
[GOOD] (define-fun s98 () Int (+ s9 s92))
[GOOD] (define-fun s99 () (Seq Int) (seq.unit s98))
[GOOD] (define-fun s100 () Int (- s90 s9))
[GOOD] (define-fun s101 () (Seq Int) (seq.extract s89 s9 s100))
[GOOD] (define-fun s102 () Int (seq.len s101))
[GOOD] (define-fun s103 () Bool (= s4 s102))
[GOOD] (define-fun s105 () (Seq Int) (seq.unit s104))
[GOOD] (define-fun s106 () (Seq Int) (seq.extract s101 s4 s9))
[GOOD] (define-fun s107 () Bool (= s105 s106))
[GOOD] (define-fun s108 () Bool (<= s102 s4))
[GOOD] (define-fun s109 () Bool (or s107 s108))
[GOOD] (define-fun s110 () Int (+ s9 s104))
[GOOD] (define-fun s111 () (Seq Int) (seq.unit s110))
[GOOD] (define-fun s112 () Int (- s102 s9))
[GOOD] (define-fun s113 () (Seq Int) (seq.extract s101 s9 s112))
[GOOD] (define-fun s114 () Int (seq.len s113))
[GOOD] (define-fun s115 () Bool (= s4 s114))
[GOOD] (define-fun s117 () (Seq Int) (seq.unit s116))
[GOOD] (define-fun s118 () (Seq Int) (seq.extract s113 s4 s9))
[GOOD] (define-fun s119 () Bool (= s117 s118))
[GOOD] (define-fun s120 () Bool (<= s114 s4))
[GOOD] (define-fun s121 () Bool (or s119 s120))
[GOOD] (define-fun s122 () Int (+ s9 s116))
[GOOD] (define-fun s123 () (Seq Int) (seq.unit s122))
[GOOD] (define-fun s124 () (Seq Int) (ite s115 s6 s123))
[GOOD] (define-fun s125 () (Seq Int) (seq.++ s111 s124))
[GOOD] (define-fun s126 () (Seq Int) (ite s103 s6 s125))
[GOOD] (define-fun s127 () (Seq Int) (seq.++ s99 s126))
[GOOD] (define-fun s128 () (Seq Int) (ite s91 s6 s127))
[GOOD] (define-fun s129 () (Seq Int) (seq.++ s87 s128))
[GOOD] (define-fun s130 () (Seq Int) (ite s79 s6 s129))
[GOOD] (define-fun s131 () (Seq Int) (seq.++ s75 s130))
[GOOD] (define-fun s132 () (Seq Int) (ite s67 s6 s131))
[GOOD] (define-fun s133 () (Seq Int) (seq.++ s63 s132))
[GOOD] (define-fun s134 () (Seq Int) (ite s55 s6 s133))
[GOOD] (define-fun s135 () (Seq Int) (seq.++ s51 s134))
[GOOD] (define-fun s136 () (Seq Int) (ite s43 s6 s135))
[GOOD] (define-fun s137 () (Seq Int) (seq.++ s39 s136))
[GOOD] (define-fun s138 () (Seq Int) (ite s31 s6 s137))
[GOOD] (define-fun s139 () (Seq Int) (seq.++ s27 s138))
[GOOD] (define-fun s140 () (Seq Int) (ite s19 s6 s139))
[GOOD] (define-fun s141 () (Seq Int) (seq.++ s15 s140))
[GOOD] (define-fun s142 () (Seq Int) (ite s5 s6 s141))
[GOOD] (define-fun s144 () (Seq Int) (seq.extract s142 s143 s9))
[GOOD] (define-fun s145 () Bool (= s2 s144))
[GOOD] (define-fun s146 () Int (seq.len s142))
[GOOD] (define-fun s147 () Bool (<= s146 s143))
[GOOD] (define-fun s148 () Bool (or s145 s147))
[GOOD] (define-fun s150 () Bool (> s1 s149))
[GOOD] (define-fun s151 () Bool (not s150))
[GOOD] (define-fun s152 () Bool (< s116 s4))
[GOOD] (define-fun s154 () Bool (> s116 s153))
[GOOD] (define-fun s155 () Bool (or s152 s154))
[GOOD] (define-fun s156 () Bool (not s115))
[GOOD] (define-fun s157 () Bool (and s155 s156))
[GOOD] (define-fun s158 () Bool (< s104 s4))
[GOOD] (define-fun s159 () Bool (> s104 s153))
[GOOD] (define-fun s160 () Bool (or s158 s159))
[GOOD] (define-fun s161 () Bool (or s157 s160))
[GOOD] (define-fun s162 () Bool (not s103))
[GOOD] (define-fun s163 () Bool (and s161 s162))
[GOOD] (define-fun s164 () Bool (< s92 s4))
[GOOD] (define-fun s165 () Bool (> s92 s153))
[GOOD] (define-fun s166 () Bool (or s164 s165))
[GOOD] (define-fun s167 () Bool (or s163 s166))
[GOOD] (define-fun s168 () Bool (not s91))
[GOOD] (define-fun s169 () Bool (and s167 s168))
[GOOD] (define-fun s170 () Bool (< s80 s4))
[GOOD] (define-fun s171 () Bool (> s80 s153))
[GOOD] (define-fun s172 () Bool (or s170 s171))
[GOOD] (define-fun s173 () Bool (or s169 s172))
[GOOD] (define-fun s174 () Bool (not s79))
[GOOD] (define-fun s175 () Bool (and s173 s174))
[GOOD] (define-fun s176 () Bool (< s68 s4))
[GOOD] (define-fun s177 () Bool (> s68 s153))
[GOOD] (define-fun s178 () Bool (or s176 s177))
[GOOD] (define-fun s179 () Bool (or s175 s178))
[GOOD] (define-fun s180 () Bool (not s67))
[GOOD] (define-fun s181 () Bool (and s179 s180))
[GOOD] (define-fun s182 () Bool (< s56 s4))
[GOOD] (define-fun s183 () Bool (> s56 s153))
[GOOD] (define-fun s184 () Bool (or s182 s183))
[GOOD] (define-fun s185 () Bool (or s181 s184))
[GOOD] (define-fun s186 () Bool (not s55))
[GOOD] (define-fun s187 () Bool (and s185 s186))
[GOOD] (define-fun s188 () Bool (< s44 s4))
[GOOD] (define-fun s189 () Bool (> s44 s153))
[GOOD] (define-fun s190 () Bool (or s188 s189))
[GOOD] (define-fun s191 () Bool (or s187 s190))
[GOOD] (define-fun s192 () Bool (not s43))
[GOOD] (define-fun s193 () Bool (and s191 s192))
[GOOD] (define-fun s194 () Bool (< s32 s4))
[GOOD] (define-fun s195 () Bool (> s32 s153))
[GOOD] (define-fun s196 () Bool (or s194 s195))
[GOOD] (define-fun s197 () Bool (or s193 s196))
[GOOD] (define-fun s198 () Bool (not s31))
[GOOD] (define-fun s199 () Bool (and s197 s198))
[GOOD] (define-fun s200 () Bool (< s20 s4))
[GOOD] (define-fun s201 () Bool (> s20 s153))
[GOOD] (define-fun s202 () Bool (or s200 s201))
[GOOD] (define-fun s203 () Bool (or s199 s202))
[GOOD] (define-fun s204 () Bool (not s19))
[GOOD] (define-fun s205 () Bool (and s203 s204))
[GOOD] (define-fun s206 () Bool (< s7 s4))
[GOOD] (define-fun s207 () Bool (> s7 s153))
[GOOD] (define-fun s208 () Bool (or s206 s207))
[GOOD] (define-fun s209 () Bool (or s205 s208))
[GOOD] (define-fun s210 () Bool (not s5))
[GOOD] (define-fun s211 () Bool (and s209 s210))
[GOOD] (define-fun s212 () Bool (or s151 s211))
[GOOD] (assert s13)
[GOOD] (assert s25)
[GOOD] (assert s37)
[GOOD] (assert s49)
[GOOD] (assert s61)
[GOOD] (assert s73)
[GOOD] (assert s85)
[GOOD] (assert s97)
[GOOD] (assert s109)
[GOOD] (assert s121)
[GOOD] (assert s148)
[GOOD] (assert s212)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
