** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-option :pp.max_depth      4294967295)
[GOOD] (set-option :pp.min_alias_size 4294967295)
[GOOD] (set-logic ALL)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- tuples ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s8 () Int 0)
[GOOD] (define-fun s11 () Int 1)
[GOOD] (define-fun s154 () Int 2)
[GOOD] (define-fun s160 () Int 11)
[GOOD] (define-fun s164 () Int 10)
[GOOD] (define-fun s3 () (Seq Int) (as seq.empty (Seq Int)))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (Seq Int)) ; tracks user variable "ints"
[GOOD] (declare-fun s1 () Int) ; tracks user variable "__internal_sbv_s1"
[GOOD] (declare-fun s5 () Int) ; tracks user variable "__internal_sbv_s5"
[GOOD] (declare-fun s20 () Int) ; tracks user variable "__internal_sbv_s20"
[GOOD] (declare-fun s33 () Int) ; tracks user variable "__internal_sbv_s33"
[GOOD] (declare-fun s46 () Int) ; tracks user variable "__internal_sbv_s46"
[GOOD] (declare-fun s59 () Int) ; tracks user variable "__internal_sbv_s59"
[GOOD] (declare-fun s72 () Int) ; tracks user variable "__internal_sbv_s72"
[GOOD] (declare-fun s85 () Int) ; tracks user variable "__internal_sbv_s85"
[GOOD] (declare-fun s98 () Int) ; tracks user variable "__internal_sbv_s98"
[GOOD] (declare-fun s111 () Int) ; tracks user variable "__internal_sbv_s111"
[GOOD] (declare-fun s124 () Int) ; tracks user variable "__internal_sbv_s124"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (Seq Int) (seq.unit s1))
[GOOD] (define-fun s4 () Bool (= s0 s3))
[GOOD] (define-fun s6 () (Seq Int) (seq.unit s5))
[GOOD] (define-fun s7 () Int (seq.len s0))
[GOOD] (define-fun s9 () Bool (> s7 s8))
[GOOD] (define-fun s10 () Bool (not s9))
[GOOD] (define-fun s12 () (Seq Int) (seq.extract s0 s8 s11))
[GOOD] (define-fun s13 () Bool (= s6 s12))
[GOOD] (define-fun s14 () Bool (or s10 s13))
[GOOD] (define-fun s15 () Int (+ s5 s11))
[GOOD] (define-fun s16 () (Seq Int) (seq.unit s15))
[GOOD] (define-fun s17 () Int (- s7 s11))
[GOOD] (define-fun s18 () (Seq Int) (seq.extract s0 s11 s17))
[GOOD] (define-fun s19 () Bool (= s3 s18))
[GOOD] (define-fun s21 () (Seq Int) (seq.unit s20))
[GOOD] (define-fun s22 () Int (seq.len s18))
[GOOD] (define-fun s23 () Bool (> s22 s8))
[GOOD] (define-fun s24 () Bool (not s23))
[GOOD] (define-fun s25 () (Seq Int) (seq.extract s18 s8 s11))
[GOOD] (define-fun s26 () Bool (= s21 s25))
[GOOD] (define-fun s27 () Bool (or s24 s26))
[GOOD] (define-fun s28 () Int (+ s11 s20))
[GOOD] (define-fun s29 () (Seq Int) (seq.unit s28))
[GOOD] (define-fun s30 () Int (- s22 s11))
[GOOD] (define-fun s31 () (Seq Int) (seq.extract s18 s11 s30))
[GOOD] (define-fun s32 () Bool (= s3 s31))
[GOOD] (define-fun s34 () (Seq Int) (seq.unit s33))
[GOOD] (define-fun s35 () Int (seq.len s31))
[GOOD] (define-fun s36 () Bool (> s35 s8))
[GOOD] (define-fun s37 () Bool (not s36))
[GOOD] (define-fun s38 () (Seq Int) (seq.extract s31 s8 s11))
[GOOD] (define-fun s39 () Bool (= s34 s38))
[GOOD] (define-fun s40 () Bool (or s37 s39))
[GOOD] (define-fun s41 () Int (+ s11 s33))
[GOOD] (define-fun s42 () (Seq Int) (seq.unit s41))
[GOOD] (define-fun s43 () Int (- s35 s11))
[GOOD] (define-fun s44 () (Seq Int) (seq.extract s31 s11 s43))
[GOOD] (define-fun s45 () Bool (= s3 s44))
[GOOD] (define-fun s47 () (Seq Int) (seq.unit s46))
[GOOD] (define-fun s48 () Int (seq.len s44))
[GOOD] (define-fun s49 () Bool (> s48 s8))
[GOOD] (define-fun s50 () Bool (not s49))
[GOOD] (define-fun s51 () (Seq Int) (seq.extract s44 s8 s11))
[GOOD] (define-fun s52 () Bool (= s47 s51))
[GOOD] (define-fun s53 () Bool (or s50 s52))
[GOOD] (define-fun s54 () Int (+ s11 s46))
[GOOD] (define-fun s55 () (Seq Int) (seq.unit s54))
[GOOD] (define-fun s56 () Int (- s48 s11))
[GOOD] (define-fun s57 () (Seq Int) (seq.extract s44 s11 s56))
[GOOD] (define-fun s58 () Bool (= s3 s57))
[GOOD] (define-fun s60 () (Seq Int) (seq.unit s59))
[GOOD] (define-fun s61 () Int (seq.len s57))
[GOOD] (define-fun s62 () Bool (> s61 s8))
[GOOD] (define-fun s63 () Bool (not s62))
[GOOD] (define-fun s64 () (Seq Int) (seq.extract s57 s8 s11))
[GOOD] (define-fun s65 () Bool (= s60 s64))
[GOOD] (define-fun s66 () Bool (or s63 s65))
[GOOD] (define-fun s67 () Int (+ s11 s59))
[GOOD] (define-fun s68 () (Seq Int) (seq.unit s67))
[GOOD] (define-fun s69 () Int (- s61 s11))
[GOOD] (define-fun s70 () (Seq Int) (seq.extract s57 s11 s69))
[GOOD] (define-fun s71 () Bool (= s3 s70))
[GOOD] (define-fun s73 () (Seq Int) (seq.unit s72))
[GOOD] (define-fun s74 () Int (seq.len s70))
[GOOD] (define-fun s75 () Bool (> s74 s8))
[GOOD] (define-fun s76 () Bool (not s75))
[GOOD] (define-fun s77 () (Seq Int) (seq.extract s70 s8 s11))
[GOOD] (define-fun s78 () Bool (= s73 s77))
[GOOD] (define-fun s79 () Bool (or s76 s78))
[GOOD] (define-fun s80 () Int (+ s11 s72))
[GOOD] (define-fun s81 () (Seq Int) (seq.unit s80))
[GOOD] (define-fun s82 () Int (- s74 s11))
[GOOD] (define-fun s83 () (Seq Int) (seq.extract s70 s11 s82))
[GOOD] (define-fun s84 () Bool (= s3 s83))
[GOOD] (define-fun s86 () (Seq Int) (seq.unit s85))
[GOOD] (define-fun s87 () Int (seq.len s83))
[GOOD] (define-fun s88 () Bool (> s87 s8))
[GOOD] (define-fun s89 () Bool (not s88))
[GOOD] (define-fun s90 () (Seq Int) (seq.extract s83 s8 s11))
[GOOD] (define-fun s91 () Bool (= s86 s90))
[GOOD] (define-fun s92 () Bool (or s89 s91))
[GOOD] (define-fun s93 () Int (+ s11 s85))
[GOOD] (define-fun s94 () (Seq Int) (seq.unit s93))
[GOOD] (define-fun s95 () Int (- s87 s11))
[GOOD] (define-fun s96 () (Seq Int) (seq.extract s83 s11 s95))
[GOOD] (define-fun s97 () Bool (= s3 s96))
[GOOD] (define-fun s99 () (Seq Int) (seq.unit s98))
[GOOD] (define-fun s100 () Int (seq.len s96))
[GOOD] (define-fun s101 () Bool (> s100 s8))
[GOOD] (define-fun s102 () Bool (not s101))
[GOOD] (define-fun s103 () (Seq Int) (seq.extract s96 s8 s11))
[GOOD] (define-fun s104 () Bool (= s99 s103))
[GOOD] (define-fun s105 () Bool (or s102 s104))
[GOOD] (define-fun s106 () Int (+ s11 s98))
[GOOD] (define-fun s107 () (Seq Int) (seq.unit s106))
[GOOD] (define-fun s108 () Int (- s100 s11))
[GOOD] (define-fun s109 () (Seq Int) (seq.extract s96 s11 s108))
[GOOD] (define-fun s110 () Bool (= s3 s109))
[GOOD] (define-fun s112 () (Seq Int) (seq.unit s111))
[GOOD] (define-fun s113 () Int (seq.len s109))
[GOOD] (define-fun s114 () Bool (> s113 s8))
[GOOD] (define-fun s115 () Bool (not s114))
[GOOD] (define-fun s116 () (Seq Int) (seq.extract s109 s8 s11))
[GOOD] (define-fun s117 () Bool (= s112 s116))
[GOOD] (define-fun s118 () Bool (or s115 s117))
[GOOD] (define-fun s119 () Int (+ s11 s111))
[GOOD] (define-fun s120 () (Seq Int) (seq.unit s119))
[GOOD] (define-fun s121 () Int (- s113 s11))
[GOOD] (define-fun s122 () (Seq Int) (seq.extract s109 s11 s121))
[GOOD] (define-fun s123 () Bool (= s3 s122))
[GOOD] (define-fun s125 () (Seq Int) (seq.unit s124))
[GOOD] (define-fun s126 () Int (seq.len s122))
[GOOD] (define-fun s127 () Bool (> s126 s8))
[GOOD] (define-fun s128 () Bool (not s127))
[GOOD] (define-fun s129 () (Seq Int) (seq.extract s122 s8 s11))
[GOOD] (define-fun s130 () Bool (= s125 s129))
[GOOD] (define-fun s131 () Bool (or s128 s130))
[GOOD] (define-fun s132 () Int (+ s11 s124))
[GOOD] (define-fun s133 () (Seq Int) (seq.unit s132))
[GOOD] (define-fun s134 () (Seq Int) (ite s123 s3 s133))
[GOOD] (define-fun s135 () (Seq Int) (seq.++ s120 s134))
[GOOD] (define-fun s136 () (Seq Int) (ite s110 s3 s135))
[GOOD] (define-fun s137 () (Seq Int) (seq.++ s107 s136))
[GOOD] (define-fun s138 () (Seq Int) (ite s97 s3 s137))
[GOOD] (define-fun s139 () (Seq Int) (seq.++ s94 s138))
[GOOD] (define-fun s140 () (Seq Int) (ite s84 s3 s139))
[GOOD] (define-fun s141 () (Seq Int) (seq.++ s81 s140))
[GOOD] (define-fun s142 () (Seq Int) (ite s71 s3 s141))
[GOOD] (define-fun s143 () (Seq Int) (seq.++ s68 s142))
[GOOD] (define-fun s144 () (Seq Int) (ite s58 s3 s143))
[GOOD] (define-fun s145 () (Seq Int) (seq.++ s55 s144))
[GOOD] (define-fun s146 () (Seq Int) (ite s45 s3 s145))
[GOOD] (define-fun s147 () (Seq Int) (seq.++ s42 s146))
[GOOD] (define-fun s148 () (Seq Int) (ite s32 s3 s147))
[GOOD] (define-fun s149 () (Seq Int) (seq.++ s29 s148))
[GOOD] (define-fun s150 () (Seq Int) (ite s19 s3 s149))
[GOOD] (define-fun s151 () (Seq Int) (seq.++ s16 s150))
[GOOD] (define-fun s152 () (Seq Int) (ite s4 s3 s151))
[GOOD] (define-fun s153 () Int (seq.len s152))
[GOOD] (define-fun s155 () Bool (> s153 s154))
[GOOD] (define-fun s156 () Bool (not s155))
[GOOD] (define-fun s157 () (Seq Int) (seq.extract s152 s154 s11))
[GOOD] (define-fun s158 () Bool (= s2 s157))
[GOOD] (define-fun s159 () Bool (or s156 s158))
[GOOD] (define-fun s161 () Bool (> s1 s160))
[GOOD] (define-fun s162 () Bool (not s161))
[GOOD] (define-fun s163 () Bool (< s124 s8))
[GOOD] (define-fun s165 () Bool (> s124 s164))
[GOOD] (define-fun s166 () Bool (or s163 s165))
[GOOD] (define-fun s167 () Bool (not s123))
[GOOD] (define-fun s168 () Bool (and s166 s167))
[GOOD] (define-fun s169 () Bool (< s111 s8))
[GOOD] (define-fun s170 () Bool (> s111 s164))
[GOOD] (define-fun s171 () Bool (or s169 s170))
[GOOD] (define-fun s172 () Bool (or s168 s171))
[GOOD] (define-fun s173 () Bool (not s110))
[GOOD] (define-fun s174 () Bool (and s172 s173))
[GOOD] (define-fun s175 () Bool (< s98 s8))
[GOOD] (define-fun s176 () Bool (> s98 s164))
[GOOD] (define-fun s177 () Bool (or s175 s176))
[GOOD] (define-fun s178 () Bool (or s174 s177))
[GOOD] (define-fun s179 () Bool (not s97))
[GOOD] (define-fun s180 () Bool (and s178 s179))
[GOOD] (define-fun s181 () Bool (< s85 s8))
[GOOD] (define-fun s182 () Bool (> s85 s164))
[GOOD] (define-fun s183 () Bool (or s181 s182))
[GOOD] (define-fun s184 () Bool (or s180 s183))
[GOOD] (define-fun s185 () Bool (not s84))
[GOOD] (define-fun s186 () Bool (and s184 s185))
[GOOD] (define-fun s187 () Bool (< s72 s8))
[GOOD] (define-fun s188 () Bool (> s72 s164))
[GOOD] (define-fun s189 () Bool (or s187 s188))
[GOOD] (define-fun s190 () Bool (or s186 s189))
[GOOD] (define-fun s191 () Bool (not s71))
[GOOD] (define-fun s192 () Bool (and s190 s191))
[GOOD] (define-fun s193 () Bool (< s59 s8))
[GOOD] (define-fun s194 () Bool (> s59 s164))
[GOOD] (define-fun s195 () Bool (or s193 s194))
[GOOD] (define-fun s196 () Bool (or s192 s195))
[GOOD] (define-fun s197 () Bool (not s58))
[GOOD] (define-fun s198 () Bool (and s196 s197))
[GOOD] (define-fun s199 () Bool (< s46 s8))
[GOOD] (define-fun s200 () Bool (> s46 s164))
[GOOD] (define-fun s201 () Bool (or s199 s200))
[GOOD] (define-fun s202 () Bool (or s198 s201))
[GOOD] (define-fun s203 () Bool (not s45))
[GOOD] (define-fun s204 () Bool (and s202 s203))
[GOOD] (define-fun s205 () Bool (< s33 s8))
[GOOD] (define-fun s206 () Bool (> s33 s164))
[GOOD] (define-fun s207 () Bool (or s205 s206))
[GOOD] (define-fun s208 () Bool (or s204 s207))
[GOOD] (define-fun s209 () Bool (not s32))
[GOOD] (define-fun s210 () Bool (and s208 s209))
[GOOD] (define-fun s211 () Bool (< s20 s8))
[GOOD] (define-fun s212 () Bool (> s20 s164))
[GOOD] (define-fun s213 () Bool (or s211 s212))
[GOOD] (define-fun s214 () Bool (or s210 s213))
[GOOD] (define-fun s215 () Bool (not s19))
[GOOD] (define-fun s216 () Bool (and s214 s215))
[GOOD] (define-fun s217 () Bool (< s5 s8))
[GOOD] (define-fun s218 () Bool (> s5 s164))
[GOOD] (define-fun s219 () Bool (or s217 s218))
[GOOD] (define-fun s220 () Bool (or s216 s219))
[GOOD] (define-fun s221 () Bool (not s4))
[GOOD] (define-fun s222 () Bool (and s220 s221))
[GOOD] (define-fun s223 () Bool (or s162 s222))
[GOOD] (assert s14)
[GOOD] (assert s27)
[GOOD] (assert s40)
[GOOD] (assert s53)
[GOOD] (assert s66)
[GOOD] (assert s79)
[GOOD] (assert s92)
[GOOD] (assert s105)
[GOOD] (assert s118)
[GOOD] (assert s131)
[GOOD] (assert s159)
[GOOD] (assert s223)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
